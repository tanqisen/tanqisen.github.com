<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cooper's Blog]]></title>
  <link href="http://tanqisen.github.com/atom.xml" rel="self"/>
  <link href="http://tanqisen.github.com/"/>
  <updated>2015-06-30T17:28:42+08:00</updated>
  <id>http://tanqisen.github.com/</id>
  <author>
    <name><![CDATA[tanqisen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何防止客户端被破解]]></title>
    <link href="http://tanqisen.github.com/blog/2014/06/06/how-to-prevent-app-crack/"/>
    <updated>2014-06-06T13:59:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2014/06/06/how-to-prevent-app-crack</id>
    <content type="html"><![CDATA[<p>很多应用都需要用户登录或者签名认证，这可能需要在客户端保存登录信息、签名密钥、加密算法等。如何保证这些重要信息不被窃取，算法不被破解，这些成为应用开发中很重要的内容，同样也是最容易忽视的地方。一个小小的细节可能就成为整个系统的突破口，这里从实际工程角度总结了一些容易忽视的细节和常用的方法。</p>

<!--more-->


<h3>密钥保存在外部</h3>

<ul>
<li><p>Keychain</p>

<p>密钥保存在Keychain并不安全，iOS越狱后可以导出Keychain的内容。应该尽量避免存放重要信息(如：token、用户名、密码等)在Keychain中，即使要存放，也一定要加密后存放。参考<a href="http://blog.csdn.net/yiyaaixuexi/article/details/18404343">http://blog.csdn.net/yiyaaixuexi/article/details/18404343</a></p></li>
<li><p>文件</p>

<p>保存在app bundle、plist等配置文件更不安全，但可以使用隐写术等方式迷惑hackers。有请Lena示范：</p>

<p><img src="http://tanqisen.github.com/images/Lena.jpg" width="256" height="256" title="Lena.jpg" >    <img src="http://tanqisen.github.com/images/Lena-secret.jpg" width="256" height="256" title="Lena-secret.jpg" ></p>

<p>两张图片看起来是一模一样的，但是右边的图片里却夹带了一些其他内容，这就是潜伏在Lena中的密码，用diff工具比较下这两张图片，你会发现不同的地方是右边的图片最后附加了一串字符：<code>app secret is "abcdefg123456"</code>。 这里的隐写方式很简单：<code>cat file &gt;&gt; Lena.jpg</code>，既不破坏图片原本的信息(或者损失一点点原有信息)，又能附加额外的信息，这就是隐写术的原理。这里只是一个简单的例子，没有人真这么使用。有很多更隐蔽的做法，比如把要隐藏的信息分散到图片的每个像素中，例如RGB888的图片，对红蓝分量最后一个bit位进行修改并不会影响图片的质量(因为人眼对对红蓝不敏感)，这样一个像素(3byte)就可以存储2bit的信息，4个像素(12byte)就可以夹带1byte的信息了。</p>

<blockquote><p>Xcode打包时会对png图片做特殊处理，如果将密码携带在png中，可能会在使用的时候无法复原。当然现在的隐写术非常多，不只是图片能作为载体，视频、音乐等文件都可以，隐写的方法也多种多样，选择适合自己的就行，据说基地组织就是通过岛国电影传递信息的。</p></blockquote></li>
</ul>


<h3>写在代码里安全吗？</h3>

<p>下面的代码很常见</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="err">#</span><span class="n">define</span> <span class="n">kSecret</span> <span class="s">&quot;abcd1234&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 或者</span>
</span><span class='line'>  <span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">kSecret</span> <span class="o">=</span> <span class="s">&quot;abcd1234&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这是非常危险的，因为常量会被直接编译到可执行文件的data段，只要对生成的可执行文件使用<code>strings</code>、<code>otool</code>等命令就可以dump出原始字符串。</p>

<h3>对密码加密</h3>

<p>为了使密码不直接出现在可执行文件中，可以对密码加密存储，使用的时候再解密。
例如用AES对密码<code>abcd1234</code>加密，对称密钥为<code>kCipherKey="abcdefgh12345678"</code>，加密后的密码用<code>kSecret</code>表示。使用密码时，再通过<code>kCipherKey</code>和<code>kSecret</code>计算出来：</p>

<figure class='code'><figcaption><span>snippet1 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">kCipherKey</span><span class="o">=</span><span class="s">&quot;abcdefgh12345678&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">const</span> <span class="kt">char</span><span class="o">*</span> <span class="n">kSecret</span><span class="o">=</span><span class="s">&quot;</span><span class="se">\x7e\x77\x64\x3c\xa7\xd4\x6d\x46\x29\x8b\xe3\x23\x9f\x1a\x5c\xdb</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="nf">getSecret</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">buf</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CCCryptorRef</span> <span class="n">cryptor</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uint8_t</span> <span class="n">iv</span><span class="p">[</span><span class="n">kCCBlockSizeAES128</span><span class="p">];</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">iv</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">kCCBlockSizeAES128</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">bufsize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">moved</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">inLength</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">kSecret</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCCryptorCreate</span><span class="p">(</span><span class="n">kCCDecrypt</span><span class="p">,</span> <span class="n">kCCAlgorithmAES128</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">kCCOptionPKCS7Padding</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">kCipherKey</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">kCipherKey</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">iv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cryptor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">bufsize</span> <span class="o">=</span> <span class="n">CCCryptorGetOutputLength</span><span class="p">(</span><span class="n">cryptor</span><span class="p">,</span> <span class="n">inLength</span><span class="p">,</span> <span class="n">true</span><span class="p">);</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">bufsize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bufsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCCryptorUpdate</span><span class="p">(</span><span class="n">cryptor</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">kSecret</span><span class="p">,</span><span class="n">inLength</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">buf</span><span class="p">,</span> <span class="n">bufsize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">moved</span><span class="p">);</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">moved</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCCryptorFinal</span><span class="p">(</span><span class="n">cryptor</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">buf</span><span class="o">+</span><span class="n">total</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">bufsize</span><span class="o">-</span><span class="n">total</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">moved</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCCryptorRelease</span><span class="p">(</span><span class="n">cryptor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span><span class="o">*</span> <span class="n">secret</span> <span class="o">=</span> <span class="n">getSecret</span><span class="p">();</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">secret</span><span class="p">);</span>
</span><span class='line'>  <span class="n">free</span><span class="p">(</span><span class="n">secret</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码不再明文出现<code>abcd1234</code>，而是被加密算子<code>kCipherKey</code>和加密后的密钥<code>kSecret</code>替代，密码只是在需要的时候临时计算出来。但是这里仍然有缺陷：加密算子<code>kCipherKey</code>和加密后的密钥<code>kSecret</code>仍然存储在可执行文件的data段中，留下了蛛丝马迹。我们可以给<code>kCipherKey</code>取一个有迷惑性的字符串，比如<code>"network error, timeout"</code>或者使用非字符值，使其不可读。但这都不完美，不在data段中存储这些信息最好。</p>

<h3>参数传递的秘密</h3>

<p>上面的代码稍做修改</p>

<figure class='code'><figcaption><span>snippet2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 注意这里</span>
</span><span class='line'><span class="cp">#define kCipherKey ((uint8_t[]){&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;})</span>
</span><span class='line'><span class="cp">#define kSecret ((uint8_t[]){0x7e,0x77,0x64,0x3c,0xa7,0xd4,0x6d,0x46,0x29,0x8b,0xe3,0x23,0x9f,0x1a,0x5c,0xdb})</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span><span class="o">*</span> <span class="nf">getSecret</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">buf</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">CCCryptorRef</span> <span class="n">cryptor</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">uint8_t</span> <span class="n">iv</span><span class="p">[</span><span class="n">kCCBlockSizeAES128</span><span class="p">];</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">iv</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">kCCBlockSizeAES128</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">bufsize</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">moved</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">total</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">size_t</span> <span class="n">inLength</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">kSecret</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCCryptorCreate</span><span class="p">(</span><span class="n">kCCDecrypt</span><span class="p">,</span> <span class="n">kCCAlgorithmAES128</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">kCCOptionPKCS7Padding</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">kCipherKey</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">kCipherKey</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">iv</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">cryptor</span><span class="p">);</span>
</span><span class='line'>    <span class="n">bufsize</span> <span class="o">=</span> <span class="n">CCCryptorGetOutputLength</span><span class="p">(</span><span class="n">cryptor</span><span class="p">,</span> <span class="n">inLength</span><span class="p">,</span> <span class="n">true</span><span class="p">);</span>
</span><span class='line'>    <span class="n">buf</span> <span class="o">=</span> <span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">malloc</span><span class="p">(</span><span class="n">bufsize</span><span class="p">);</span>
</span><span class='line'>    <span class="n">memset</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">bufsize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCCryptorUpdate</span><span class="p">(</span><span class="n">cryptor</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">kSecret</span><span class="p">,</span><span class="n">inLength</span><span class="p">,</span>
</span><span class='line'>                    <span class="n">buf</span><span class="p">,</span> <span class="n">bufsize</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">moved</span><span class="p">);</span>
</span><span class='line'>    <span class="n">total</span> <span class="o">+=</span> <span class="n">moved</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">CCCryptorFinal</span><span class="p">(</span><span class="n">cryptor</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">buf</span><span class="o">+</span><span class="n">total</span><span class="p">,</span>
</span><span class='line'>                   <span class="n">bufsize</span><span class="o">-</span><span class="n">total</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">moved</span><span class="p">);</span>
</span><span class='line'>    <span class="n">CCCryptorRelease</span><span class="p">(</span><span class="n">cryptor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">buf</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span><span class="o">*</span> <span class="n">secret</span> <span class="o">=</span> <span class="n">getSecret</span><span class="p">();</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">secret</span><span class="p">);</span>
</span><span class='line'>    <span class="n">free</span><span class="p">(</span><span class="n">secret</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>看似和上面代码没什么区别，除了传入的参数类型变了，其余没什么变化。正是这一点带来了巨大的变化，对比一下调用CCCryptorCreate时的汇编代码：</p>

<figure class='code'><figcaption><span>snippet1-disassemble</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Demo</span><span class="err">`</span><span class="n">getSecret</span> <span class="n">at</span> <span class="n">main</span><span class="p">.</span><span class="nl">m:</span><span class="mi">58</span><span class="o">:</span>
</span><span class='line'><span class="mh">0x31f04</span><span class="o">:</span>  <span class="n">push</span>   <span class="p">{</span><span class="n">r4</span><span class="p">,</span> <span class="n">r5</span><span class="p">,</span> <span class="n">r6</span><span class="p">,</span> <span class="n">r7</span><span class="p">,</span> <span class="n">lr</span><span class="p">}</span>
</span><span class='line'><span class="mh">0x31f06</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r7</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc</span>
</span><span class='line'><span class="mh">0x31f08</span><span class="o">:</span>  <span class="n">push</span><span class="p">.</span><span class="n">w</span> <span class="p">{</span><span class="n">r8</span><span class="p">,</span> <span class="n">r10</span><span class="p">,</span> <span class="n">r11</span><span class="p">}</span>
</span><span class='line'><span class="mh">0x31f0c</span><span class="o">:</span>  <span class="n">sub</span>    <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x28</span>
</span><span class='line'><span class="mh">0x31f0e</span><span class="o">:</span>  <span class="n">movw</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x112a</span>
</span><span class='line'><span class="mh">0x31f12</span><span class="o">:</span>  <span class="n">vmov</span><span class="p">.</span><span class="n">i32</span> <span class="n">q8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x31f16</span><span class="o">:</span>  <span class="n">movt</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x31f1a</span><span class="o">:</span>  <span class="n">movw</span>   <span class="n">r8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x16d8</span>
</span><span class='line'><span class="mh">0x31f1e</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r0</span><span class="p">,</span> <span class="n">pc</span>
</span><span class='line'><span class="mh">0x31f20</span><span class="o">:</span>  <span class="n">movt</span>   <span class="n">r8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x31f24</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r8</span><span class="p">,</span> <span class="n">pc</span>
</span><span class='line'><span class="mh">0x31f26</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r6</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x14</span>
</span><span class='line'><span class="mh">0x31f28</span><span class="o">:</span>  <span class="n">ldr</span><span class="p">.</span><span class="n">w</span>  <span class="n">r10</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f2c</span><span class="o">:</span>  <span class="n">ldr</span><span class="p">.</span><span class="n">w</span>  <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r10</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f30</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x24</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f32</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x31f34</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f36</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f38</span><span class="o">:</span>  <span class="n">ldr</span><span class="p">.</span><span class="n">w</span>  <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r8</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f3c</span><span class="o">:</span>  <span class="n">vst1</span><span class="mf">.32</span> <span class="p">{</span><span class="n">d16</span><span class="p">,</span> <span class="n">d17</span><span class="p">},</span> <span class="p">[</span><span class="n">r6</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f40</span><span class="o">:</span>  <span class="n">blx</span>    <span class="mh">0x32ffc</span>                   <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">strlen</span>
</span><span class='line'><span class="mh">0x31f44</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">r4</span><span class="p">,</span> <span class="n">r0</span>
</span><span class='line'><span class="mh">0x31f46</span><span class="o">:</span>  <span class="n">movw</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x16aa</span>
</span><span class='line'><span class="mh">0x31f4a</span><span class="o">:</span>  <span class="n">movt</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x31f4e</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r0</span><span class="p">,</span> <span class="n">pc</span>
</span><span class='line'><span class="mh">0x31f50</span><span class="o">:</span>  <span class="n">ldr</span>    <span class="n">r5</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f52</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">r0</span><span class="p">,</span> <span class="n">r5</span>
</span><span class='line'><span class="mh">0x31f54</span><span class="o">:</span>  <span class="n">blx</span>    <span class="mh">0x32ffc</span>                   <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">strlen</span>
</span><span class='line'><span class="mh">0x31f58</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r1</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span>
</span><span class='line'><span class="mh">0x31f5a</span><span class="o">:</span>  <span class="n">stm</span><span class="p">.</span><span class="n">w</span>  <span class="n">sp</span><span class="p">,</span> <span class="p">{</span><span class="n">r0</span><span class="p">,</span> <span class="n">r6</span><span class="p">}</span>
</span><span class='line'><span class="mh">0x31f5e</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1</span>
</span><span class='line'><span class="mh">0x31f60</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x31f62</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x31f64</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1</span>
</span><span class='line'><span class="mh">0x31f66</span><span class="o">:</span>  <span class="n">mov</span>    <span class="n">r3</span><span class="p">,</span> <span class="n">r5</span>
</span><span class='line'><span class="mh">0x31f68</span><span class="o">:</span>  <span class="n">blx</span>    <span class="mh">0x32fd4</span>                   <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">CCCryptorCreate</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>snippet2-disassemble </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">Demo</span><span class="err">`</span><span class="n">getSecret</span> <span class="n">at</span> <span class="n">main</span><span class="p">.</span><span class="nl">m:</span><span class="mi">23</span><span class="o">:</span>
</span><span class='line'><span class="mh">0x4de84</span><span class="o">:</span>  <span class="n">push</span>   <span class="p">{</span><span class="n">r4</span><span class="p">,</span> <span class="n">r5</span><span class="p">,</span> <span class="n">r6</span><span class="p">,</span> <span class="n">r7</span><span class="p">,</span> <span class="n">lr</span><span class="p">}</span>
</span><span class='line'><span class="mh">0x4de86</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r7</span><span class="p">,</span> <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc</span>
</span><span class='line'><span class="mh">0x4de88</span><span class="o">:</span>  <span class="n">push</span><span class="p">.</span><span class="n">w</span> <span class="p">{</span><span class="n">r8</span><span class="p">,</span> <span class="n">r10</span><span class="p">,</span> <span class="n">r11</span><span class="p">}</span>
</span><span class='line'><span class="mh">0x4de8c</span><span class="o">:</span>  <span class="n">sub</span>    <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x3c</span>
</span><span class='line'><span class="mh">0x4de8e</span><span class="o">:</span>  <span class="n">movw</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x11a6</span>
</span><span class='line'><span class="mh">0x4de92</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x4de94</span><span class="o">:</span>  <span class="n">movt</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x4de98</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r6</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x64</span>
</span><span class='line'><span class="mh">0x4de9a</span><span class="o">:</span>  <span class="n">add</span>    <span class="n">r0</span><span class="p">,</span> <span class="n">pc</span>
</span><span class='line'><span class="mh">0x4de9c</span><span class="o">:</span>  <span class="n">vmov</span><span class="p">.</span><span class="n">i32</span> <span class="n">q8</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x4dea0</span><span class="o">:</span>  <span class="n">ldr</span>    <span class="n">r5</span><span class="p">,</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dea2</span><span class="o">:</span>  <span class="n">ldr</span>    <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r5</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dea4</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">28</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dea8</span><span class="o">:</span>  <span class="n">sub</span><span class="p">.</span><span class="n">w</span>  <span class="n">r0</span><span class="p">,</span> <span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x2c</span>
</span><span class='line'><span class="mh">0x4deac</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">80</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4deb0</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">84</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4deb4</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x61</span>
</span><span class='line'><span class="mh">0x4deb6</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">60</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4deba</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x62</span>
</span><span class='line'><span class="mh">0x4debc</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">59</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dec0</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x63</span>
</span><span class='line'><span class="mh">0x4dec2</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">58</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dec6</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x65</span>
</span><span class='line'><span class="mh">0x4dec8</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r6</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">57</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4decc</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">56</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4ded0</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x66</span>
</span><span class='line'><span class="mh">0x4ded2</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">55</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4ded6</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x67</span>
</span><span class='line'><span class="mh">0x4ded8</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">54</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dedc</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x68</span>
</span><span class='line'><span class="mh">0x4dede</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">53</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dee2</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x31</span>
</span><span class='line'><span class="mh">0x4dee4</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">52</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4dee8</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x32</span>
</span><span class='line'><span class="mh">0x4deea</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">51</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4deee</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x33</span>
</span><span class='line'><span class="mh">0x4def0</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">50</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4def4</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x34</span>
</span><span class='line'><span class="mh">0x4def6</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">49</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4defa</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x35</span>
</span><span class='line'><span class="mh">0x4defc</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">48</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df00</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x36</span>
</span><span class='line'><span class="mh">0x4df02</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">47</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df06</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x37</span>
</span><span class='line'><span class="mh">0x4df08</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">46</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df0c</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x38</span>
</span><span class='line'><span class="mh">0x4df0e</span><span class="o">:</span>  <span class="n">vst1</span><span class="mf">.32</span> <span class="p">{</span><span class="n">d16</span><span class="p">,</span> <span class="n">d17</span><span class="p">},</span> <span class="p">[</span><span class="n">r0</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df12</span><span class="o">:</span>  <span class="n">strb</span>   <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="o">-</span><span class="mi">45</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df16</span><span class="o">:</span>  <span class="n">sub</span>    <span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0xc</span>
</span><span class='line'><span class="mh">0x4df18</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x10</span>
</span><span class='line'><span class="mh">0x4df1a</span><span class="o">:</span>  <span class="n">sub</span><span class="p">.</span><span class="n">w</span>  <span class="n">r1</span><span class="p">,</span> <span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x50</span>
</span><span class='line'><span class="mh">0x4df1e</span><span class="o">:</span>  <span class="n">sub</span><span class="p">.</span><span class="n">w</span>  <span class="n">r3</span><span class="p">,</span> <span class="n">r7</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x3c</span>
</span><span class='line'><span class="mh">0x4df22</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r2</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df24</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r0</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x4</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df26</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r0</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1</span>
</span><span class='line'><span class="mh">0x4df28</span><span class="o">:</span>  <span class="n">str</span>    <span class="n">r1</span><span class="p">,</span> <span class="p">[</span><span class="n">sp</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x8</span><span class="p">]</span>
</span><span class='line'><span class="mh">0x4df2a</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r1</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x0</span>
</span><span class='line'><span class="mh">0x4df2c</span><span class="o">:</span>  <span class="n">movs</span>   <span class="n">r2</span><span class="p">,</span> <span class="err">#</span><span class="mh">0x1</span>
</span><span class='line'><span class="mh">0x4df2e</span><span class="o">:</span>  <span class="n">blx</span>    <span class="mh">0x4efdc</span>                   <span class="p">;</span> <span class="n">symbol</span> <span class="n">stub</span> <span class="k">for</span><span class="o">:</span> <span class="n">CCCryptorCreate</span>
</span></code></pre></td></tr></table></div></figure>


<p>注意CCCryptorCreate的第四个参数，对应寄存器<code>r3</code>，第一段代码的<code>r3</code>的值是从text段直接获取，因为这只是data段的相对地址，编译时就确定了。而再看第二段代码，出现了大量的<code>strb</code>指令，分析知这段指令是把<code>abcdefgh12345678</code>每个字符逐个压进执行栈的连续地址中，然后<code>r3</code>取相应的连续地址的首地址。也就是说<code>kCipherKey</code>不再直接存储在data段，而是打散到多个指令中，成为指令的一部分(指令在text段)，当代码运行时，这些指令再把<code>kCipherKey</code>原始内容逐个压入执行栈中构成字符串，然后用栈中字符串首地址作为参数传给<code>CCCryptorCreate</code>，这使得每次调用时传入的字符串地址都不同。函数<code>CCCryptorUpdate</code>原理也是一样。函数<code>getSecret()</code>执行完之后，他的执行栈被清空，<code>kCipherKey</code>和<code>kSecret</code>原始信息也一起从栈中清楚，这样重要信息不会常驻内存，只是用到时才进入内存，用完立即清除，这可以有效预防内存扫描器。</p>

<blockquote><p>上面的代码仍然不够完美，首先<code>getSecret</code>是函数形式、而且密码通过返回值传递，容易被分析破解；其次返回的密码的buffer内存需要调用者释放，代码不够整洁，而且调用者容易忘记。</p></blockquote>

<h3>宏改造</h3>

<figure class='code'><figcaption><span>snippet3 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define kCipherKey ((uint8_t[]){&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;})</span>
</span><span class='line'><span class="cp">#define kSecret ((uint8_t[]){0x7e,0x77,0x64,0x3c,0xa7,0xd4,0x6d,0x46,0x29,0x8b,0xe3,0x23,0x9f,0x1a,0x5c,0xdb})</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define kAppSecret                                          \</span>
</span><span class='line'><span class="cp">({                                                          \</span>
</span><span class='line'><span class="cp">    size_t outLength = 0;                                   \</span>
</span><span class='line'><span class="cp">    char* buf = getSecret(outLength);                      \</span>
</span><span class='line'><span class="cp">    [[NSString alloc] initWithBytes:buf                     \</span>
</span><span class='line'><span class="cp">                            length:outLength                \</span>
</span><span class='line'><span class="cp">                          encoding:NSASCIIStringEncoding];  \</span>
</span><span class='line'><span class="cp">})</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define _CHK_CCSUCC(status, outLength)                      \</span>
</span><span class='line'><span class="cp">    if ((status) != kCCSuccess) {                           \</span>
</span><span class='line'><span class="cp">    outLength = 0;                                          \</span>
</span><span class='line'><span class="cp">    goto end;                                               \</span>
</span><span class='line'><span class="cp">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#define getSecret(outLength)                                \</span>
</span><span class='line'><span class="cp">({                                                          \</span>
</span><span class='line'><span class="cp">    __label__ end;                                          \</span>
</span><span class='line'><span class="cp">    char* buf = NULL;                                       \</span>
</span><span class='line'><span class="cp">                                                            \</span>
</span><span class='line'><span class="cp">    CCCryptorRef cryptor = NULL;                            \</span>
</span><span class='line'><span class="cp">    uint8_t iv[kCCBlockSizeAES128];                         \</span>
</span><span class='line'><span class="cp">    memset(iv, 0, kCCBlockSizeAES128);                      \</span>
</span><span class='line'><span class="cp">                                                            \</span>
</span><span class='line'><span class="cp">    size_t bufsize = 0;                                     \</span>
</span><span class='line'><span class="cp">    size_t moved = 0;                                       \</span>
</span><span class='line'><span class="cp">    size_t total = 0;                                       \</span>
</span><span class='line'><span class="cp">    size_t inLength = sizeof(kSecret);                      \</span>
</span><span class='line'><span class="cp">                                                            \</span>
</span><span class='line'><span class="cp">    _CHK_CCSUCC(CCCryptorCreate(kCCDecrypt,                 \</span>
</span><span class='line'><span class="cp">                kCCAlgorithmAES128,                         \</span>
</span><span class='line'><span class="cp">                kCCOptionPKCS7Padding,                      \</span>
</span><span class='line'><span class="cp">                kCipherKey, sizeof(kCipherKey),             \</span>
</span><span class='line'><span class="cp">                iv, &amp;cryptor), outLength);                  \</span>
</span><span class='line'><span class="cp">    bufsize = CCCryptorGetOutputLength(cryptor,             \</span>
</span><span class='line'><span class="cp">                                       inLength, true);     \</span>
</span><span class='line'><span class="cp">    buf = (char*)alloca(bufsize);                           \</span>
</span><span class='line'><span class="cp">    memset(buf, 0, bufsize);                                \</span>
</span><span class='line'><span class="cp">                                                            \</span>
</span><span class='line'><span class="cp">    _CHK_CCSUCC(CCCryptorUpdate(cryptor,                    \</span>
</span><span class='line'><span class="cp">                                kSecret,inLength,           \</span>
</span><span class='line'><span class="cp">                                buf, bufsize, &amp;moved),      \</span>
</span><span class='line'><span class="cp">                                outLength);                 \</span>
</span><span class='line'><span class="cp">    total += moved;                                         \</span>
</span><span class='line'><span class="cp">                                                            \</span>
</span><span class='line'><span class="cp">    _CHK_CCSUCC(CCCryptorFinal(cryptor,                     \</span>
</span><span class='line'><span class="cp">                               buf+total,                   \</span>
</span><span class='line'><span class="cp">                               bufsize-total, &amp;moved),      \</span>
</span><span class='line'><span class="cp">                               outLength);                  \</span>
</span><span class='line'><span class="cp">    total += moved;                                         \</span>
</span><span class='line'><span class="cp">                                                            \</span>
</span><span class='line'><span class="cp">    outLength = total;                                      \</span>
</span><span class='line'><span class="cp">end:                                                        \</span>
</span><span class='line'><span class="cp">    if (cryptor) {                                          \</span>
</span><span class='line'><span class="cp">        CCCryptorRelease(cryptor);                          \</span>
</span><span class='line'><span class="cp">    }                                                       \</span>
</span><span class='line'><span class="cp">    buf;                                                    \</span>
</span><span class='line'><span class="cp">})</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">kAppSecret</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码稍微改造了一下，加入了一些必要的检测，让调用者更加简单，宏<code>kAppSecret</code>将密码包装成NSString对象。更重要的是，<code>buf</code>的内存不再是<code>malloc</code>到堆上，而是<code>alloca</code>到栈上(或者使用C99的变长数组)，确切的说是<em>调用者</em>的栈，<em>调用者</em>不再需要手动释放内存；另外，因为<code>kAppSecret</code>是宏，没有有明确的入口，静态分析更加困难。</p>

<blockquote><p><strong>这里用了宏定义的两个技巧：</strong></p></blockquote>

<ul>
<li>带返回值的宏</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="cp">#define SOME_MACRO \</span>
</span><span class='line'><span class="cp">({                 \</span>
</span><span class='line'><span class="cp">  expression;      \</span>
</span><span class='line'><span class="cp">})                 \</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后一个表达式的值就是宏的返回值，使用时更像函数的返回值。</p>

<ul>
<li>局部标签</li>
</ul>


<p>局部标签用<code>__label__</code>定义。如果标签<code>end</code>没有<code>__label__</code>修饰，在同一个函数中多次使用<code>kAppSecret</code>将产生编译错误，因为宏展开后相当于定义了多个<code>end</code>标签，标签重复定义。</p>

<h3>函数指针</h3>

<p>在客户端访问Web Server的时候，Server往往要验证请求是否来自合法的客户端，而不是攻击者伪造的请求，这就需要客户端签名。例如OAuth的签名算法。如果自己定义签名算法，不希望别人知道签名的过程，就需要保护算法不被破解。例如签名算法是<code>HMAC-SHA1(key,MD5(data))</code>：</p>

<figure class='code'><figcaption><span>signature1 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nf">signatureData:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">byKey:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">key</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">md</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CC_MD5</span><span class="p">(</span><span class="n">data</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span> <span class="p">(</span><span class="n">CC_LONG</span><span class="p">)</span><span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> <span class="n">md</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">mac</span><span class="p">[</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>    <span class="n">CCHmac</span><span class="p">(</span><span class="n">kCCHmacAlgSHA1</span><span class="p">,</span> <span class="n">key</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span> <span class="n">key</span><span class="p">.</span><span class="n">length</span><span class="p">,</span> <span class="n">md</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">mac</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">hexStringFromBytes:</span><span class="n">mac</span> <span class="nl">length:</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这段代码本身没有问题，但是对系统函数的直接调用导致代码容易被静态分析，用IDA、otool等静态分析工具可以很容易的知道这个函数的workflow，签名过程被轻易破解。为了防备静态分析，可以使用函数指针间接调用函数：</p>

<figure class='code'><figcaption><span>signature2 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">SecurityService</span> : <span class="nc">NSObject</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">initWithMD5Function:</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="nv">md5</span> <span class="nf">HMACFunction:</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="nv">hmac</span><span class="p">;</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nf">signatureData:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">data</span> <span class="nf">byKey:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="nv">key</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">SecurityService</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span>   <span class="n">_md5Funcation</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span>   <span class="n">_hmacFuncation</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nl">initWithMD5Function:</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">md5</span> <span class="nl">HMACFunction:</span><span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)</span><span class="n">hmac</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_md5Funcation</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_md5Funcation</span><span class="o">^</span><span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">md5</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_hmacFuncation</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_hmacFuncation</span><span class="o">^</span><span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">hmac</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nl">signatureData:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">data</span> <span class="nl">byKey:</span><span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span><span class="n">key</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">unsigned</span> <span class="kt">char</span> <span class="n">md</span><span class="p">[</span><span class="mi">16</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">void</span><span class="o">*</span> <span class="n">func</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_md5Funcation</span> <span class="o">^</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">_md5Funcation</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">unsigned</span> <span class="kt">char</span> <span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="n">CC_LONG</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">char</span><span class="o">*</span><span class="p">))</span><span class="n">func</span><span class="p">)(</span><span class="n">data</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span>
</span><span class='line'>                                                                    <span class="p">(</span><span class="n">CC_LONG</span><span class="p">)</span><span class="n">data</span><span class="p">.</span><span class="n">length</span><span class="p">,</span>
</span><span class='line'>                                                                    <span class="n">md</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">char</span> <span class="n">mac</span><span class="p">[</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'>    <span class="n">func</span> <span class="o">=</span> <span class="p">(</span><span class="kt">void</span><span class="o">*</span><span class="p">)(</span><span class="kt">unsigned</span> <span class="kt">long</span><span class="p">)((</span><span class="n">uint</span><span class="p">)</span><span class="o">&amp;</span><span class="n">_hmacFuncation</span> <span class="o">^</span> <span class="p">(</span><span class="n">uint</span><span class="p">)</span><span class="n">_hmacFuncation</span><span class="p">);</span>
</span><span class='line'>    <span class="p">((</span><span class="kt">void</span><span class="p">(</span><span class="o">*</span><span class="p">)(</span><span class="n">CCHmacAlgorithm</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="n">size_t</span><span class="p">,</span> <span class="k">const</span> <span class="kt">void</span><span class="o">*</span><span class="p">,</span> <span class="n">size_t</span><span class="p">,</span> <span class="kt">void</span><span class="o">*</span><span class="p">))</span><span class="n">func</span><span class="p">)(</span><span class="n">kCCHmacAlgSHA1</span><span class="p">,</span>
</span><span class='line'>                                                                                      <span class="n">key</span><span class="p">.</span><span class="n">UTF8String</span><span class="p">,</span>
</span><span class='line'>                                                                                      <span class="n">key</span><span class="p">.</span><span class="n">length</span><span class="p">,</span>
</span><span class='line'>                                                                                      <span class="n">md</span><span class="p">,</span>
</span><span class='line'>                                                                                      <span class="mi">16</span><span class="p">,</span>
</span><span class='line'>                                                                                      <span class="n">mac</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">self</span> <span class="nl">hexStringFromBytes:</span><span class="n">mac</span> <span class="nl">length:</span><span class="n">CC_SHA1_DIGEST_LENGTH</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="n">NSString</span><span class="o">*</span><span class="p">)</span> <span class="nl">hexStringFromBytes:</span><span class="p">(</span><span class="kt">char</span><span class="o">*</span><span class="p">)</span><span class="n">bytes</span> <span class="nl">length:</span><span class="p">(</span><span class="n">NSUInteger</span><span class="p">)</span><span class="n">length</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSMutableString</span> <span class="o">*</span><span class="n">hexStr</span><span class="o">=</span><span class="p">[[</span><span class="n">NSMutableString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="mi">2</span><span class="o">*</span><span class="n">length</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">length</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">hexStr</span> <span class="nl">appendFormat:</span><span class="s">@&quot;%02x&quot;</span><span class="p">,</span> <span class="n">bytes</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">&amp;</span><span class="mh">0xff</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithString:</span><span class="n">hexStr</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">SecurityService</span><span class="o">*</span> <span class="n">ss</span> <span class="o">=</span> <span class="p">[[</span><span class="n">SecurityService</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithMD5Function:</span><span class="n">CC_MD5</span> <span class="nl">HMACFunction:</span><span class="n">CCHmac</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span><span class="o">*</span> <span class="n">sign</span> <span class="o">=</span> <span class="p">[</span><span class="n">ss</span> <span class="nl">signatureData:</span><span class="s">@&quot;1234&quot;</span> <span class="nl">byKey:</span><span class="n">kAppSecret</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">sign</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>签名类初始化的时候，保存了HASH函数的地址值，执行签名的时，通过HASH函数的地址间接调用，这样静态分析工具分析到这里的时候，只能看到调用了某个地址，而不知道调用的具体函数，隐藏了真实目的。</p>

<blockquote><p>这里不是直接将函数地址赋值给对象属性，而是用属性的地址与函数的地址做抑或运算。这样做主要有两个原因：</p>

<blockquote><ul>
<li><p>直接赋值可能被编译器优化，编译器自动将使用该属性的地方替换成函数本身；</p></li>
<li><p>类实例的创建有随机性，属性的内存地址也具有随机性，用属性地址加密函数地址，这样属性值在每次运行时都不一样；</p></li>
</ul>
</blockquote></blockquote>

<p>在Android或其他平台还可以用dlsym来获取函数地址：</p>

<figure class='code'><figcaption><span>伪代码 </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">char</span> <span class="n">data</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mh">0x32</span><span class="p">,</span> <span class="mh">0x71</span><span class="p">,</span> <span class="mh">0x0b</span><span class="p">,</span> <span class="mh">0x48</span><span class="p">,</span> <span class="mh">0xe3</span><span class="p">,</span> <span class="mh">0xbc</span><span class="p">,</span> <span class="mh">0x6a</span><span class="p">,</span> <span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x8e</span><span class="p">,</span> <span class="mh">0xca</span><span class="p">,</span> <span class="mh">0x3b</span><span class="p">,</span> <span class="mh">0x0e</span><span class="p">};</span>
</span><span class='line'><span class="kt">char</span> <span class="n">sym</span><span class="p">[</span><span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">);</span> <span class="n">i</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">sym</span><span class="p">[</span><span class="n">i</span><span class="o">/</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">data</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">// sym = &quot;CC_MD5&quot;</span>
</span><span class='line'><span class="kt">void</span><span class="o">*</span> <span class="n">md5</span> <span class="o">=</span> <span class="n">dlsym</span><span class="p">(</span><span class="n">handle</span><span class="p">,</span> <span class="n">sym</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>代码混淆</h3>

<p>因为objc代码的动态性，编译器会在binary中留下类名、函数名等信息，这些信息是可以被<code>class-dump-z</code>等工具提取的，友好的命名让程序猿更方便，但同时也方便了破解者。对安全相关的重要模块类，可以故意混淆类名，让人不容易轻易联想到该的真实目的。比如把类名<code>SecurityService</code>改为<code>FIFA</code>。一些重要模块可以使用C/C++语言实现，编译器对C/C++并不会保留类名、方法名等信息。</p>

<blockquote><p>使用混淆的名字对使用者很不方便，例如<code>[[FIFA alloc] initWithMD5Function:CC_MD5 HMACFunction:CCHmac];</code>这样的代码让人不知其意。可以用宏定义一个友好的名字来替代原来的类名<code>#define SecurityService FIFA</code></p></blockquote>

<h3>动态调试</h3>

<p>除了静态分析，破解者还可以使用gdb动态调试、Theos hook来分析代码，常用的系统加密函数、HASH函数都可能成为监控的对象，只要监控传递给他们的参数、调用栈就能轻松分析出密钥、算法等。所以使用系统的加密函数虽然节省开发时间、执行效率高，但并不是很安全，有些算法可能需要自己重写。</p>

<h3>反调试</h3>

<p>可以用ptrace等方法阻止gdb注入，但ptrace本身也可以被静态修改或hook。只好从多方面考虑，尽量提高安全性，比如检查binary签名是否匹配；检查手机是否越狱，越机做特殊处理等。参考<a href="http://blog.csdn.net/yiyaaixuexi/article/details/20286929">http://blog.csdn.net/yiyaaixuexi/article/details/20286929</a></p>

<h3>代码加密</h3>

<p>类似UPX等加壳技术在iOS中无法使用，因为iOS堆、栈内存都没有执行权限，这也是jit技术无法在iOS中使用的原因(除非苹果自己或越狱系统)。</p>

<h3>脚本</h3>

<p>将算法用脚本实现，脚本被编译成bytecode后，app解释执行bytecode指令，可以有效的防止动态调试，因为hackers看到的将是一条条的指令在switch case中执行，就像把图片的像素逐个地放给别人看，当他看完全部的像素后也不一定知道整张图片是什么样子。当然用脚本方式会增大开发成本，对执行效率也有一定影响，需要开发者在安全、开发成本、性能三者之间找个平衡点。</p>

<h3>最后</h3>

<p>软件保护技术多种多样，比如构造花指令，甚至有硬件级的加密模块TPM(Trusted Platform Module)。总之没有绝对的安全，但危险显然也只是相对的，只要提高编码意识，注意防护就可以把风险降到最低。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步实现Android打飞机（二）]]></title>
    <link href="http://tanqisen.github.com/blog/2013/09/13/develop-android-wechat-flight-game-step-by-step-2/"/>
    <updated>2013-09-13T18:31:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2013/09/13/develop-android-wechat-flight-game-step-by-step-2</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/tanqisen/Flight">Android打飞机源码</a></p>

<h3>六、角色和状态接口设计</h3>

<p>角色基本属性有最大生命值、当前生命值、速度、攻击力、角色位置、角色状态等。角色行为有移动、显示、检测是否与别的角色碰撞、被攻击等。状态属于角色内部属性，可将状态设计成内部类的形式，在特定状态下，角色有特定的行为。例如，正常状态下敌机匀速向屏幕底部移动，受伤后敌机会加速移动，爆炸时敌机原地爆炸、不能移动。</p>

<blockquote><p>注意：我这里说的接口并不是java语言的接口，为了方便实现，使用了普通java类。另外属性权限访问也没有严格限制，还需要改进。</p></blockquote>

<!--more-->




<div><script src='https://gist.github.com/6608198.js?file=Art.java'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>详细解释一下：</p>

<ol>
<li><code>ArtFactory</code>角色工厂，管理角色的创建和回收等；</li>
<li><code>GameContext</code>游戏环境，主要完成贴图的工作，让角色本身不用再关心如何贴图，角色只要设置好当前要绘制的精灵名<code>sprite</code>，GameContext自动根据精灵名称、角色位置显示当前角色；</li>
<li><code>reset</code>函数用来初始化角色的所有属性，用于被角色工厂重用；</li>
<li>在<code>move</code>和<code>draw</code>函数中传入的参数<code>float deltaTime</code>表示上一帧到当前帧所用的时间间隔，这个时间用来计算角色当前要偏移的距离(speed * deltaTime)，以及动画持续时间控制，如爆炸效果的一组图片轮播时，每个图片显示0.1秒，就需要用这个参数控制；总之，这个参数目的是消除不同帧率的设备上移动、动画等速度不一致的问题。</li>
<li>这里的碰撞检测只是简单的矩形碰撞，有时看起来不是很真实，特别是飞机的两个角发生碰撞时。如果希望准确的碰撞检测可以在检测到矩形相交后，进一步检测相交区域的像素是否碰撞；</li>
</ol>


<blockquote><p>碰撞检测时会遇到一个问题是，如果在大分辨率的手机上运行游戏，因为子弹、飞机等的图片很小，如果子弹速度很快，会出现子弹击穿飞机现象。其实这并不是碰撞检测出了问题，而是子弹速度过快导致上一帧子弹距离飞机还有一段距离，但接下来的一帧，由于速度太大导致偏移的距离(speed * deltaTime)直接越过了飞机，显示在了飞机后面，视觉上感觉子弹从飞机身体里穿越过去了。处理这个问题的办法是，子弹的速度不要的过大，同时可以使用使用大点的飞机图片。</p>

<p>另外：由于没注意看文档，踩到了Rect的一个坑。Rect.intersects(r1, r2); 和r1.intersect(r2)居然有不一样的行为，你敢信？</p></blockquote>

<h3>七、使用Art和ArtState接口实现小型敌机</h3>

<div><script src='https://gist.github.com/6608198.js?file=Enemy1.java'></script>
<noscript><pre><code></code></pre></noscript></div>


<p>可以看出小飞机的实现过程非常简单，只需要设置小飞机的各项属性，以及实现小飞机可能处于的状态类，同时为不同状态实现不同行为就可以了。小飞机没有被攻击被攻击的状态，就不用实现相应状态类。同样地方法可实现英雄、中型飞机、敌机、子弹等角色，这里不再详细列举。</p>

<h3>八、角色工厂</h3>

<p>角色工厂的目标是按一定的时间间隔创建新角色和回收利用被销毁的角色。提供的接口有：</p>

<figure class='code'><figcaption><span>角色工厂  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 构造函数</span>
</span><span class='line'><span class="c1">// 基于一定的时间间隔(tick)和随机因素(salt)创建一个cls实例</span>
</span><span class='line'><span class="kd">public</span> <span class="nf">ArtFactory</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">cls</span><span class="o">,</span> <span class="kt">float</span> <span class="n">tick</span><span class="o">,</span> <span class="kt">int</span> <span class="n">salt</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 按时间间隔随机生成新角色，如果生成成功返回实例，失败返回null</span>
</span><span class='line'><span class="kd">public</span> <span class="n">Art</span> <span class="nf">genareteArt</span><span class="o">(</span><span class="n">GameContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="kt">float</span> <span class="n">deltaTime</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 重复利用角色a</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">reuseArt</span><span class="o">(</span><span class="n">Art</span> <span class="n">a</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>九、武器实现</h3>

<p>英雄可以拥有不同武器，武器可以发射子弹。武器我们可以抽象成</p>

<figure class='code'><figcaption><span>武器接口  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">IWeapon</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 开火</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Art</span> <span class="nf">fire</span><span class="o">(</span><span class="kt">float</span> <span class="n">deltaTime</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>实现一个具体武器：</p>

<figure class='code'><figcaption><span>具体武器实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Weapon</span> <span class="kd">implements</span> <span class="n">IWeapon</span> <span class="o">{</span>
</span><span class='line'>  <span class="c1">// 武器持有者</span>
</span><span class='line'>  <span class="n">Art</span> <span class="n">hero</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 子弹工厂，不同的子弹工厂就可以发射不同的子弹</span>
</span><span class='line'>  <span class="n">ArtFactory</span> <span class="n">bulletFactory</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Weapon</span><span class="o">(</span><span class="n">Art</span> <span class="n">hero</span><span class="o">,</span> <span class="n">ArtFactory</span> <span class="n">bulletFactory</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">hero</span> <span class="o">=</span> <span class="n">hero</span><span class="o">;</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">bulletFactory</span> <span class="o">=</span> <span class="n">bulletFactory</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">Art</span> <span class="nf">fire</span><span class="o">(</span><span class="kt">float</span> <span class="n">deltaTime</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 发射子弹</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">bulletFactory</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Art</span> <span class="n">b</span> <span class="o">=</span> <span class="n">bulletFactory</span><span class="o">.</span><span class="na">genareteArt</span><span class="o">(</span><span class="n">hero</span><span class="o">.</span><span class="na">gameContext</span><span class="o">,</span> <span class="n">deltaTime</span><span class="o">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 工厂生成新子弹后，根据武器持有者当前位置，调整发射子弹的初始位置</span>
</span><span class='line'>        <span class="n">b</span><span class="o">.</span><span class="na">spriteFrame</span><span class="o">.</span><span class="na">offset</span><span class="o">(</span><span class="n">hero</span><span class="o">.</span><span class="na">spriteFrame</span><span class="o">.</span><span class="na">left</span><span class="o">+(</span><span class="n">hero</span><span class="o">.</span><span class="na">spriteFrame</span><span class="o">.</span><span class="na">width</span><span class="o">()</span> <span class="o">-</span> <span class="n">b</span><span class="o">.</span><span class="na">spriteFrame</span><span class="o">.</span><span class="na">width</span><span class="o">())/</span><span class="mi">2</span><span class="o">,</span> <span class="n">hero</span><span class="o">.</span><span class="na">spriteFrame</span><span class="o">.</span><span class="na">top</span><span class="o">-</span><span class="n">b</span><span class="o">.</span><span class="na">spriteFrame</span><span class="o">.</span><span class="na">top</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">b</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>十、尾声</h3>

<p>其他一些基础类如Sprite、SpriteManager、以及GameContext如何绘制精灵、滚动背景如何绘制等细节问题不展开讨论了。基本的组件都创建好了，我们只要实现GameController来使用这些组件、加上一定的游戏逻辑就基本完成了，当然这只是一个游戏的原型，还有很多地方不够完善，这只是对Android开发的初次尝试，希望完成这个游戏的过程中的分析方法、程序设计方法、碰到的问题等可以给大家一些启发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步实现Android打飞机（一）]]></title>
    <link href="http://tanqisen.github.com/blog/2013/09/13/develop-android-wechat-flight-game-step-by-step-1/"/>
    <updated>2013-09-13T18:31:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2013/09/13/develop-android-wechat-flight-game-step-by-step-1</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/tanqisen/Flight">Android打飞机源码</a></p>

<h3>一、概述</h3>

<p>  对没有Android开发经验，或对JAVA语言不是太熟悉的同学，希望尝试Android开发应该如何进入呢？为了避免枯燥地看教程、阅读官方sample，学习一大堆不知道什么时候会用上的API，我选择打飞机这个游戏作为切入点。一是因为开发简单游戏并不会涉及过多的平台API以及平台特性，只需要知道基本的贴图、多线程、用户交互等接口就足够了；二是可以把更多的精力放到熟悉语言、培养语感，当然还有游戏本身的逻辑，以及程序设计的通用模式；三是自己动手开发更有趣味性，所以开发中并没有使用游戏框架如cocos2d-x等，仅仅使用了一些Android原始API，毕竟只是为了学习。</p>

<h3>二、游戏框架</h3>

<p>  这是一个典型的贴图游戏，没有复杂的图形变换、动画效果等，你看到的所有效果都是不断移动、替换图片实现的，比如飞机的爆炸效果，就是连续显示几张不同的图片实现的。为了不影响用户交互，比如控制飞机移动，贴图和逻辑控制的工作应该放到一个新的线程中。Android提供了<code>SurfaceView</code>类来处理贴图的问题，让<code>SurfaceView</code>实现<code>Runnable</code>接口并配合<code>Thread</code>可以解决在子线程中贴图以及逻辑控制的问题。</p>

<!--more-->




<figure class='code'><figcaption><span>创建游戏循环  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FlightSurfaceView</span> <span class="kd">extends</span> <span class="n">SurfaceView</span> <span class="kd">implements</span> <span class="n">Callback</span><span class="o">,</span> <span class="n">Runnable</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">Thread</span> <span class="n">th</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>  <span class="kd">private</span> <span class="n">SurfaceHolder</span> <span class="n">sfh</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">FlightSurfaceView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>    <span class="k">this</span><span class="o">.</span><span class="na">setKeepScreenOn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="n">sfh</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getHolder</span><span class="o">();</span>
</span><span class='line'>    <span class="n">sfh</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setFocusable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">surfaceCreated</span><span class="o">(</span><span class="n">SurfaceHolder</span> <span class="n">holder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 开始游戏循环</span>
</span><span class='line'>    <span class="n">th</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">onTouchEvent</span><span class="o">(</span><span class="n">MotionEvent</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 主线程事件处理</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 游戏线程，游戏循环</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 游戏逻辑控制</span>
</span><span class='line'>        <span class="n">updateFrame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 渲染当前帧</span>
</span><span class='line'>        <span class="n">renderFrame</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// 休眠当前线程，线程切换</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">30</span><span class="o">);</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">surfaceChanged</span><span class="o">(</span><span class="n">SurfaceHolder</span> <span class="n">holder</span><span class="o">,</span> <span class="kt">int</span> <span class="n">format</span><span class="o">,</span> <span class="kt">int</span> <span class="n">width</span><span class="o">,</span> <span class="kt">int</span> <span class="n">height</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">surfaceDestroyed</span><span class="o">(</span><span class="n">SurfaceHolder</span> <span class="n">holder</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateFrame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">renderFrame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样，一个基本的游戏循环就建立起来了。但这只是一个什么都不做的空循环，我们还得再这里处理游戏逻辑，以及渲染当前帧。我们先看如何渲染图片、文字。</p>

<figure class='code'><figcaption><span>绘图过程  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">renderFrame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="n">sfh</span><span class="o">.</span><span class="na">lockCanvas</span><span class="o">();</span> <span class="c1">// 获取并锁定canvas</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>    <span class="c1">// 保存当前绘图环境</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// TODO 具体绘制</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">restore</span><span class="o">();</span> <span class="c1">// 恢复先前绘图环境</span>
</span><span class='line'>  <span class="n">sfh</span><span class="o">.</span><span class="na">unlockCanvasAndPost</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span> <span class="c1">// 解锁canvas并绘制</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>具体绘制时，我们还需要一个绘图工具<code>Paint</code>来设置绘制的颜色、字体、样式等参数。</p>

<figure class='code'><figcaption><span>创建 Paint 绘图及游戏简单控制  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">Paint</span> <span class="n">paint</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Paint</span> <span class="n">textPaint</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="n">Bitmap</span> <span class="n">bmp</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="nf">FlightSurfaceView</span><span class="o">(</span><span class="n">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="kd">super</span><span class="o">(</span><span class="n">context</span><span class="o">);</span>
</span><span class='line'>  <span class="k">this</span><span class="o">.</span><span class="na">setKeepScreenOn</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>  <span class="n">sfh</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getHolder</span><span class="o">();</span>
</span><span class='line'>  <span class="n">sfh</span><span class="o">.</span><span class="na">addCallback</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">paint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class='line'>  <span class="n">paint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">WHITE</span><span class="o">);</span>   <span class="c1">// 设置颜色为白色</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">textPaint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Paint</span><span class="o">();</span>
</span><span class='line'>  <span class="n">textPaint</span><span class="o">.</span><span class="na">setColor</span><span class="o">(</span><span class="n">Color</span><span class="o">.</span><span class="na">RED</span><span class="o">);</span> <span class="c1">// 设置红色文字画笔</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">bmp</span> <span class="o">=</span> <span class="n">BitmapFactory</span><span class="o">.</span><span class="na">decodeResource</span><span class="o">(</span><span class="n">res</span><span class="o">,</span> <span class="n">R</span><span class="o">.</span><span class="na">drawable</span><span class="o">.</span><span class="na">hero</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">x</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">setFocusable</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 简单的游戏控制，这里每帧向右下移动一次图片</span>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">updateFrame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">x</span> <span class="o">++;</span>
</span><span class='line'>  <span class="n">y</span> <span class="o">++;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">x</span><span class="o">&gt;</span><span class="mi">320</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">x</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">y</span><span class="o">&gt;</span><span class="mi">480</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">y</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">private</span> <span class="kt">void</span> <span class="nf">renderFrame</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">Canvas</span> <span class="n">canvas</span> <span class="o">=</span> <span class="n">sfh</span><span class="o">.</span><span class="na">lockCanvas</span><span class="o">();</span> <span class="c1">// 获取并锁定canvas</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">save</span><span class="o">();</span>    <span class="c1">// 保存当前绘图环境</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 绘制白色背景</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawRect</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">320</span><span class="o">,</span><span class="mi">480</span><span class="o">,</span><span class="n">paint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 绘制文字</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="s">&quot;Flight&quot;</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">textPaint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 绘制图片</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawBitmap</span><span class="o">(</span><span class="n">bmp</span><span class="o">,</span> <span class="n">x</span><span class="o">,</span> <span class="n">y</span><span class="o">,</span> <span class="n">paint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// 绘制文字</span>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">drawText</span><span class="o">(</span><span class="s">&quot;Flight&quot;</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">paint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">canvas</span><span class="o">.</span><span class="na">restore</span><span class="o">();</span> <span class="c1">// 恢复先前绘图环境</span>
</span><span class='line'>  <span class="n">sfh</span><span class="o">.</span><span class="na">unlockCanvasAndPost</span><span class="o">(</span><span class="n">canvas</span><span class="o">);</span> <span class="c1">// 解锁canvas并绘制</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>关于Android图形API这里就不详细解释了，后面的内容才是重点。</p>

<h3>三、游戏资源</h3>

<p>游戏中用到的图片、声音等资源可以直接从微信中抠出。这里我使用的是微信iOS版的资源。解开微信安装包，找到了<code>gameArts-hd.png</code>、<code>gameArts-hd.plist</code>、<code>gameArts.png</code>、<code>gameArts.plist</code>两套图片资源，<code>hd</code>是针对高分辨率的一套图，这里我只用了普通的分辨率<code>320x480</code>的资源，一共有两个文件，一个是图片<code>gameArts.png</code>，里面包含所有的精灵贴图，以及爆炸效果等，如图所示：</p>

<p><img src="http://tanqisen.github.com/images/gamearts.png" width="256" height="512" title="gameArts.png" ></p>

<blockquote><p>gameArts.png图片加载的是需要注意一点是使用<code>Bitmap bmp = BitmapFactory.decodeResource(res, R.raw.gamearts);</code>加载后图片由于Android系统优化，可能改变图片原来的分辨率，导致贴图的时候坐标偏移不对，这里最好使用<code>InputStream is = this.getResources().openRawResource(R.raw.gamearts); bmp = BitmapFactory.decodeStream(is);</code>来加载图片</p></blockquote>

<p>另一个文件是<code>gameArts.plist</code>，里面记录了每个精灵在<code>gameArts.png</code>中的位置以及尺寸等信息。截取gameArts.plist文件的一个片段，解释一下字段含义：</p>

<figure class='code'><figcaption><span>gameArts.plist 片段  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;hero_fly_1.png&quot;</span><span class="err">:</span><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;textureRect&quot;</span><span class="p">:</span><span class="s2">&quot;{ {432, 0}, {66, 82} }&quot;</span><span class="p">,</span>   <span class="err">//</span> <span class="err">精灵在图片文件中的位置、大小</span>
</span><span class='line'>  <span class="nt">&quot;spriteSize&quot;</span><span class="p">:</span><span class="s2">&quot;{66, 82}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;spriteColorRect&quot;</span><span class="p">:</span><span class="s2">&quot;{ {1, 1}, {66, 82} }&quot;</span><span class="p">,</span> <span class="err">//</span> <span class="err">精灵有效像素的偏移及大小</span>
</span><span class='line'>  <span class="nt">&quot;spriteTrimmed&quot;</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;aliases&quot;</span><span class="p">:[],</span>
</span><span class='line'>  <span class="nt">&quot;spriteOffset&quot;</span><span class="p">:</span><span class="s2">&quot;{0, -0}&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;textureRotated&quot;</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span> <span class="err">//</span> <span class="err">是否旋转</span>
</span><span class='line'>  <span class="nt">&quot;spriteSourceSize&quot;</span><span class="p">:</span><span class="s2">&quot;{68, 84}&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这些字段中主要使用了<code>textureRect</code>和<code>spriteColorRect</code>，由于这套图片中的精灵都没有被旋转，所以<code>textureRotated</code>这里不需要。另外由于plist格式在Android中没原生支持，为了解析方便使用的时候将gameArts.plist转成了json格式。</p>

<blockquote><p>可能Android的apk包中的资源跟iOS格式不一样，不过大同小异，只是对文件的解析过程不一样，不影响游戏本身逻辑。可以尝试对不同分辨率载入不同资源。</p></blockquote>

<h3>四、 游戏分析</h3>

<p>先看游戏中的元素，有随机生产的敌机、玩家控制的英雄飞机、发射的子弹、掉落的降落伞等。</p>

<ul>
<li>英雄：

<ol>
<li>正常情况下，玩家可以控制其在屏幕范围内任意移动；</li>
<li>同时英雄会以一定频率自动发射子弹；</li>
<li>英雄可以持有不同种类的武器；</li>
<li>英雄在与敌机碰撞之后会爆炸，爆炸后会闪烁几次，然后游戏结束；</li>
</ol>
</li>
<li>敌机：

<ol>
<li>敌机有小型飞机、中型飞机、大型飞机；</li>
<li>小飞机再中弹后即刻爆炸；</li>
<li>中型飞机和大型飞机在受到一定次数攻击后会有预示将要爆炸的闪烁效果；</li>
<li>如果再继续被攻击到一定次数，敌机就会爆炸；</li>
<li>敌机被击爆之后，玩家会获取一定分数；</li>
<li>敌机的移动不需要玩家控制，而是以一定的随机速度向下移动；</li>
</ol>
</li>
<li>子弹：

<ol>
<li>只有英雄会发射子弹；</li>
<li>子弹遇到敌机后会攻击敌机；</li>
<li>同时子弹本身会消失；</li>
</ol>
</li>
<li>降落伞：

<ol>
<li>降落伞和英雄碰撞后，降落伞闪烁几次后消失；</li>
<li>同时玩家可以获得降落伞携带的道具，如双倍子弹、炸弹；</li>
</ol>
</li>
</ul>


<h4>从上面的描述中，我们至少可以抽象出两个基本概率：</h4>

<ol>
<li>类似英雄、敌机、子弹等有生命、有攻击力、可以移动等特性的物体，我们可以抽象成游戏中的<code>角色</code>；</li>
<li><p>游戏角色在不同时刻有不同<code>状态</code>，在<code>不同状态下有不同行为</code>。比如敌机可以在受到攻击后，可以加快速度冲向英雄，也可以处于闪烁状态，预示飞机即将爆炸；进一步对状态分析后发现，可以抽象出如下几种状态：</p>

<ul>
<li>正常状态：未受到攻击或只是轻微受伤，角色可以正常移动，攻击（对英雄），冲撞对方等；</li>
<li>被攻击状态：角色受到一定攻击，角色移动速度可能加快，或者带闪烁效果等；</li>
<li>爆炸状态：此时角色已经被消灭，但还未从屏幕中消失，正在爆炸过程中，此时角色已经没有攻击力，也不能移动了；</li>
<li>销毁状态：角色完全爆炸完成会进入这个状态，或角色移动出了屏幕范围，如子弹、敌机移出了屏幕范围也相当于被销毁了，此时角色不会显示在屏幕上了，他的生命周期已经结束；</li>
</ul>
</li>
</ol>


<blockquote><p>角色在不同时刻处于不同的状态，而且状态是可以转化的，如正常飞行的飞机在受到轻微攻击时可能转换到被攻击状态，但受到较大伤害（如玩家投放炸弹）可能使飞机直接转换到爆炸状态；并不是每个角色都存在这四种状态，如小飞机没有被攻击状态，因为小飞机一但被攻击，会直接爆炸。</p></blockquote>

<p>通过这个分析，我们抽象出了<code>角色</code>和<code>状态</code>，下一步就是开始大致设计这个游戏模块了。</p>

<h3>五、模块划分与程序设计</h3>

<ul>
<li>首先，游戏资源的加载和管理以及精灵的绘制都与游戏逻辑没直接关系，可以单独设计一个模块；</li>
<li>另外角色的创建和回收设计成一个专门的模块，回收角色是为了避免不断的创建新对象，如子弹会源源不断的发射出去，我们不可能每发射一颗子弹就创建一个新对象，这将消耗大量的设备资源，对GC的压力非常大，所以需要回收被销毁的角色，如被消灭的敌机、子弹等，回收后下次需要&#8221;创建&#8221;新对象时，我们只需要对回收后的角色初始化后再利用。这个模块还可以控制角色的创建时机。例如用一个固定时间间隔创建新的子弹，或者在一个时间段内随机生成一架敌机等；</li>
<li>游戏逻辑模块控制角色移动，游戏道具、英雄武器切换、玩家分数、游戏暂停等等；</li>
</ul>


<p>这个简单的模块划分对接下来的编码实现是非常有帮助的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[正确使用Block避免Cycle Retain和Crash]]></title>
    <link href="http://tanqisen.github.com/blog/2013/04/19/gcd-block-cycle-retain/"/>
    <updated>2013-04-19T11:03:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2013/04/19/gcd-block-cycle-retain</id>
    <content type="html"><![CDATA[<blockquote><p>本文只讨论了MRC时的情况，ARC下略有不同</p></blockquote>

<h3>Block简介</h3>

<p>  Block作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于Objective-C在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理
要么导致return cycle内存泄漏要么内存被提前释放导致crash。
Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值。换句话说，Block不仅
实现函数的功能，还能携带函数的执行环境。</p>

<!--more-->


<p>可以这样理解，Block其实包含两个部分内容</p>

<ol>
<li>Block执行的代码，这是在编译的时候已经生成好的；</li>
<li>一个包含<code>Block执行时需要的所有外部变量值</code>的数据结构。 Block将使用到的、作用域附近到的<code>变量的值</code>建立一份快照拷贝到栈上。</li>
</ol>


<p>Block与函数另一个不同是，Block类似ObjC的对象，可以使用自动释放池管理内存（但Block并不完全等同于ObjC对象，后面将详细说明）。</p>

<h3>Block基本语法</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// 声明一个Block变量</span>
</span><span class='line'><span class="kt">long</span> <span class="p">(</span><span class="o">^</span><span class="n">sum</span><span class="p">)</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'><span class="c1">// sum是个Block变量，该Block类型有两个int型参数，返回类型是long。</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 定义Block并赋给变量sum</span>
</span><span class='line'><span class="n">sum</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用Block：</span>
</span><span class='line'><span class="kt">long</span> <span class="n">s</span> <span class="o">=</span> <span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>定义一个实例函数，该函数返回Block：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">long</span> <span class="p">(</span><span class="o">^</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">))</span> <span class="nf">sumBlock</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="n">copy</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 调用Block</span>
</span><span class='line'><span class="p">[</span><span class="n">self</span> <span class="n">sumBlock</span><span class="p">](</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>是不是感觉很怪？为了看的舒服，我们把Block类型typedef一下</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">typedef</span> <span class="nf">long</span> <span class="p">(</span><span class="o">^</span><span class="n">BlkSum</span><span class="p">)(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">BlkSum</span><span class="p">)</span> <span class="nf">sumBlock</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BlkSum</span> <span class="n">blk</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">[[</span><span class="n">blk</span> <span class="n">copy</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Block在内存中的位置</h3>

<p>根据Block在内存中的位置分为三种类型NSGlobalBlock，NSStackBlock, NSMallocBlock。</p>

<ul>
<li>NSGlobalBlock：类似函数，位于text段；</li>
<li>NSStackBlock：位于栈内存，函数返回后Block将无效；</li>
<li>NSMallocBlock：位于堆内存。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">BlkSum</span> <span class="n">blk1</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;blk1 = %@&quot;</span><span class="p">,</span> <span class="n">blk1</span><span class="p">);</span><span class="c1">// blk1 = &lt;__NSGlobalBlock__: 0x47d0&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">BlkSum</span> <span class="n">blk2</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;blk2 = %@&quot;</span><span class="p">,</span> <span class="n">blk2</span><span class="p">);</span> <span class="c1">// blk2 = &lt;__NSStackBlock__: 0xbfffddf8&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">BlkSum</span> <span class="n">blk3</span> <span class="o">=</span> <span class="p">[[</span><span class="n">blk2</span> <span class="n">copy</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;blk3 = %@&quot;</span><span class="p">,</span> <span class="n">blk3</span><span class="p">);</span> <span class="c1">// blk3 = &lt;__NSMallocBlock__: 0x902fda0&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>为什么blk1类型是NSGlobalBlock，而blk2类型是NSStackBlock？blk1和blk2的区别在于，blk1没有使用Block以外的任何外部变量，Block不需要建立局部变量值的快照，这使blk1与函数没有任何区别，从blk1所在内存地址0x47d0猜测编译器把blk1放到了text代码段。blk2与blk1唯一不同是的使用了局部变量base，在定义（注意是定义，不是运行）blk2时，局部变量base当前值被copy到栈上，作为<code>常量</code>供Block使用。执行下面代码，结果是203，而不是204。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="n">base</span> <span class="o">+=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BlkSum</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">base</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%ld&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>在Block内变量base是只读的，如果想在Block内改变base的值，在定义base时要用 <code>__block</code>修饰：<code>__block int base = 100;</code>。</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="n">__block</span> <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="n">base</span> <span class="o">+=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BlkSum</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">base</span> <span class="o">+=</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">base</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">base</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>输出将是214,211。Block中使用<code>__block</code>修饰的变量时，将取变量此刻运行时的值，而不是定义时的快照。这个例子中，执行<code>sum(1,2)</code>时，base将取<code>base++</code>之后的值，也就是201，再执行Block<code>base+=10; base+a+b</code>，运行结果是214。执行完Block时，base已经变成211了。</p></blockquote>

<h3>Block的copy、retain、release操作</h3>

<p>不同于NSObjec的copy、retain、release操作：</p>

<ul>
<li>Block_copy与copy等效，Block_release与release等效；</li>
<li>对Block不管是retain、copy、release都不会改变引用计数retainCount，retainCount始终是1；</li>
<li>NSGlobalBlock：retain、copy、release操作都无效；</li>
<li>NSStackBlock：retain、release操作无效，必须注意的是，NSStackBlock在函数返回后，Block内存将被回收。即使retain也没用。容易犯的错误是[<code>[mutableAarry addObject:stackBlock]</code>，在函数出栈后，从mutableAarry中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：<code>[mutableAarry addObject:[[stackBlock copy] autorelease]]</code>。支持copy，copy之后生成新的NSMallocBlock类型对象。</li>
<li>NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似retain；</li>
<li>尽量不要对Block使用retain操作。</li>
</ul>


<h3>Block对不同类型的变量的存取</h3>

<h5>基本类型</h5>

<ul>
<li>局部自动变量，在Block中只读。Block定义时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响他在Block中的值。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">BlkSum</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// base++; 编译错误，只读</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 这里输出是103，而不是3</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>static变量、全局变量。如果把上个例子的base改成全局的、或static。Block就可以对他进行读写了。因为全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量。</li>
</ul>


<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'><span class="n">BlkSum</span> <span class="n">sum</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">base</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%ld</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">));</span> <span class="c1">// 这里输出是3，而不是103</span>
</span><span class='line'><span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">base</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出结果是<code>0 4 1</code>，表明Block外部对base的更新会影响Block中的base的取值，同样Block对base的更新也会影响Block外部的base值。</p>

<ul>
<li>Block变量，被<code>__block</code>修饰的变量称作Block变量。
基本类型的Block变量等效于全局变量、或静态变量。</li>
</ul>


<h5>Block被另一个Block使用时，另一个Block被copy到堆上时，被使用的Block也会被copy。但作为参数的Block是不会发生copy的。</h5>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="kt">void</span> <span class="nf">foo</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">base</span> <span class="o">=</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>  <span class="n">BlkSum</span> <span class="n">blk</span> <span class="o">=</span> <span class="o">^</span> <span class="kt">long</span> <span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span>  <span class="n">base</span> <span class="o">+</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">blk</span><span class="p">);</span> <span class="c1">// &lt;__NSStackBlock__: 0xbfffdb40&gt;</span>
</span><span class='line'>  <span class="n">bar</span><span class="p">(</span><span class="n">blk</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">bar</span><span class="p">(</span><span class="n">BlkSum</span> <span class="n">sum_blk</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">sum_blk</span><span class="p">);</span> <span class="c1">// 与上面一样，说明作为参数传递时，并不会发生copy</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">blk</span><span class="p">)</span> <span class="p">(</span><span class="n">BlkSum</span><span class="p">)</span> <span class="o">=</span> <span class="o">^</span> <span class="p">(</span><span class="n">BlkSum</span> <span class="n">sum</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">sum</span><span class="p">);</span>     <span class="c1">// 无论blk在堆上还是栈上，作为参数的Block不会发生copy。</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span><span class="n">sum_blk</span><span class="p">);</span> <span class="c1">// 当blk copy到堆上时，sum_blk也被copy了一分到堆上上。</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">blk</span><span class="p">(</span><span class="n">sum_blk</span><span class="p">);</span> <span class="c1">// blk在栈上</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">blk</span> <span class="o">=</span> <span class="p">[[</span><span class="n">blk</span> <span class="n">copy</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>  <span class="n">blk</span><span class="p">(</span><span class="n">sum_blk</span><span class="p">);</span> <span class="c1">// blk在堆上</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h5>ObjC对象，不同于基本类型，Block会引起对象的引用计数变化。</h5>

<p>先看下面代码</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">MyClass</span> : <span class="nc">NSObject</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSObject</span><span class="o">*</span> <span class="n">_instanceObj</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="k">@implementation</span> <span class="nc">MyClass</span>
</span><span class='line'>
</span><span class='line'><span class="n">NSObject</span><span class="o">*</span> <span class="n">__globalObj</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">id</span><span class="p">)</span> <span class="nf">init</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="n">init</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">_instanceObj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">static</span> <span class="n">NSObject</span><span class="o">*</span> <span class="n">__staticObj</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__globalObj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">__staticObj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSObject</span><span class="o">*</span> <span class="n">localObj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>    <span class="n">__block</span> <span class="n">NSObject</span><span class="o">*</span> <span class="n">blockObj</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSObject</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">typedef</span> <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">MyBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">)</span> <span class="p">;</span>
</span><span class='line'>    <span class="n">MyBlock</span> <span class="n">aBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">__globalObj</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">__staticObj</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">_instanceObj</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">localObj</span><span class="p">);</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">blockObj</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">aBlock</span> <span class="o">=</span> <span class="p">[[</span><span class="n">aBlock</span> <span class="n">copy</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>    <span class="n">aBlock</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">__globalObj</span> <span class="n">retainCount</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">__staticObj</span> <span class="n">retainCount</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">_instanceObj</span> <span class="n">retainCount</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">localObj</span> <span class="n">retainCount</span><span class="p">]);</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%d&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">blockObj</span> <span class="n">retainCount</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">MyClass</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">MyClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[</span><span class="n">obj</span> <span class="n">test</span><span class="p">];</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>执行结果为<code>1 1 1 2 1</code>。</p>

<p><code>__globalObj</code>和<code>__staticObj</code>在内存中的位置是确定的，所以Block copy时不会retain对象。</p>

<p><code>_instanceObj</code>在Block copy时也没有直接retain <code>_instanceObj</code>对象本身，但会retain self。所以在Block中可以直接读写<code>_instanceObj</code>变量。</p>

<p><code>localObj</code>在Block copy时，系统自动retain对象，增加其引用计数。</p>

<p><code>blockObj</code>在Block copy时也不会retain。</p>

<h5>非ObjC对象，如GCD队列dispatch_queue_t。Block copy时并不会自动增加他的引用计数，这点要非常小心。</h5>

<h3>Block中使用的ObjC对象的行为</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">copy</span><span class="p">)</span> <span class="kt">void</span><span class="p">(</span><span class="o">^</span><span class="n">myBlock</span><span class="p">)(</span><span class="kt">void</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">MyClass</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">MyClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">obj</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>对象obj在Block被copy到堆上的时候自动retain了一次。因为Block不知道obj什么时候被释放，为了不在Block使用obj前被释放，Block retain了obj一次，在Block被释放的时候，obj被release一次。</p>

<h3>retain cycle</h3>

<p>retain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ASIHTTPRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">ASIHTTPRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span> <span class="nl">setCompletionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">request</span> <span class="n">responseString</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>       <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>       <span class="o">|</span> <span class="n">request</span>   <span class="o">|</span>           <span class="o">|</span>   <span class="n">Block</span>   <span class="o">|</span>
</span><span class='line'>  <span class="o">---&gt;</span> <span class="o">|</span>           <span class="o">|</span> <span class="o">--------&gt;</span> <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>       <span class="o">|</span> <span class="n">retain</span> <span class="mi">2</span>  <span class="o">|</span> <span class="o">&lt;--------</span> <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span>
</span><span class='line'>       <span class="o">|</span>           <span class="o">|</span>           <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>       <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决这个问题的办法是使用弱引用打断retain cycle：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="n">ASIHTTPRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">ASIHTTPRequest</span> <span class="nl">requestWithURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">request</span> <span class="nl">setCompletionBlock:</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">NSString</span><span class="o">*</span> <span class="n">string</span> <span class="o">=</span> <span class="p">[</span><span class="n">request</span> <span class="n">responseString</span><span class="p">];</span>
</span><span class='line'><span class="p">}];</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">request</span>   <span class="o">|</span>           <span class="o">|</span>   <span class="n">Block</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">----&gt;|</span>           <span class="o">|</span> <span class="o">--------&gt;</span> <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span> <span class="o">&lt;</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span>           <span class="o">|</span>   <span class="n">weak</span>    <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>request</code>被持有者释放后。request 的retainCount变成0,request被dealloc，request释放持有的Block，导致Block的retainCount变成0，也被销毁。这样这两个对象内存都被回收。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">request</span>   <span class="o">|</span>           <span class="o">|</span>   <span class="n">Block</span>   <span class="o">|</span>
</span><span class='line'> <span class="o">--</span><span class="n">X</span><span class="o">-&gt;|</span>           <span class="o">|</span> <span class="o">----</span><span class="n">X</span><span class="o">---&gt;</span> <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">retain</span> <span class="mi">0</span>  <span class="o">|</span> <span class="o">&lt;</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">|</span> <span class="n">retain</span> <span class="mi">0</span>  <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span>           <span class="o">|</span>   <span class="n">weak</span>    <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>与上面情况类似的陷阱：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">self</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里self和myBlock循环引用，解决办法同上：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="n">MyClass</span><span class="o">*</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">someVar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">_someVer</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里在Block中虽然没直接使用self，但使用了成员变量。在Block中使用成员变量，retain的不是这个变量，而会retain self。解决办法也和上面一样。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">retain</span><span class="p">)</span> <span class="n">NSString</span><span class="o">*</span> <span class="n">someVar</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">__block</span> <span class="n">MyClass</span><span class="o">*</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">someVer</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>或者</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">NSString</span><span class="o">*</span> <span class="n">str</span> <span class="o">=</span> <span class="n">_someVer</span><span class="p">;</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">str</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>retain cycle不只发生在两个对象之间，也可能发生在多个对象之间，这样问题更复杂，更难发现</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ClassA</span><span class="o">*</span> <span class="n">objA</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">ClassA</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>  <span class="n">objA</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">objA</span> <span class="o">=</span> <span class="n">objA</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">+-----------+</span>           <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>  <span class="o">|</span>   <span class="n">self</span>    <span class="o">|</span>           <span class="o">|</span>   <span class="n">objA</span>    <span class="o">|</span>           <span class="o">|</span>   <span class="n">Block</span>   <span class="o">|</span>
</span><span class='line'>  <span class="o">|</span>           <span class="o">|</span> <span class="o">--------&gt;</span> <span class="o">|</span>           <span class="o">|</span> <span class="o">--------&gt;</span> <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>  <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span>           <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span>           <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span>
</span><span class='line'>  <span class="o">|</span>           <span class="o">|</span>           <span class="o">|</span>           <span class="o">|</span>           <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>  <span class="o">+-----------+</span>           <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>       <span class="o">^</span>                                                <span class="o">|</span>
</span><span class='line'>       <span class="o">|</span>                                                <span class="o">|</span>
</span><span class='line'>       <span class="o">+------------------------------------------------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>解决办法同样是用<code>__block</code>打破循环引用</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">ClassA</span><span class="o">*</span> <span class="n">objA</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">ClassA</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">MyClass</span><span class="o">*</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">objA</span><span class="p">.</span><span class="n">myBlock</span> <span class="o">=</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="p">[</span><span class="n">weakSelf</span> <span class="n">doSomething</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">self</span><span class="p">.</span><span class="n">objA</span> <span class="o">=</span> <span class="n">objA</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>注意</strong>：MRC中<code>__block</code>是不会引起retain；但在ARC中<code>__block</code>则会引起retain。ARC中应该使用<code>__weak</code>或<code>__unsafe_unretained</code>弱引用。<code>__weak</code>只能在iOS5以后使用。</p></blockquote>

<h3>Block使用对象被提前释放</h3>

<p>看下面例子，有这种情况，如果不只是<code>request</code>持有了Block，另一个对象也持有了Block。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">request</span>   <span class="o">|</span>           <span class="o">|</span>   <span class="n">Block</span>   <span class="o">|</span>   <span class="n">objA</span>
</span><span class='line'> <span class="o">----&gt;|</span>           <span class="o">|</span> <span class="o">--------&gt;</span> <span class="o">|</span>           <span class="o">|&lt;--------</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span> <span class="o">&lt;</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">|</span> <span class="n">retain</span> <span class="mi">2</span>  <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span>           <span class="o">|</span>   <span class="n">weak</span>    <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时如果request 被持有者释放。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">request</span>   <span class="o">|</span>           <span class="o">|</span>   <span class="n">Block</span>   <span class="o">|</span>   <span class="n">objA</span>
</span><span class='line'> <span class="o">--</span><span class="n">X</span><span class="o">-&gt;|</span>           <span class="o">|</span> <span class="o">--------&gt;</span> <span class="o">|</span>           <span class="o">|&lt;--------</span>
</span><span class='line'>      <span class="o">|</span> <span class="n">retain</span> <span class="mi">0</span>  <span class="o">|</span> <span class="o">&lt;</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">-</span> <span class="o">|</span> <span class="n">retain</span> <span class="mi">1</span>  <span class="o">|</span>
</span><span class='line'>      <span class="o">|</span>           <span class="o">|</span>   <span class="n">weak</span>    <span class="o">|</span>           <span class="o">|</span>
</span><span class='line'>      <span class="o">+-----------+</span>           <span class="o">+-----------+</span>
</span></code></pre></td></tr></table></div></figure>


<p>这时request已被完全释放，但Block仍被objA持有，没有释放，如果这时触发了Block，在Block中将访问已经销毁的request，这将导致程序crash。为了避免这种情况，开发者必须要注意对象和Block的生命周期。</p>

<p>另一个常见错误使用是，开发者担心retain cycle错误的使用<code>__block</code>。比如</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">__block</span> <span class="n">kkProducView</span><span class="o">*</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="n">dispatch_async</span><span class="p">(</span><span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>  <span class="n">weakSelf</span><span class="p">.</span><span class="n">xx</span> <span class="o">=</span> <span class="n">xx</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>将Block作为参数传给dispatch_async时，系统会将Block拷贝到堆上，如果Block中使用了实例变量，还将retain self，因为dispatch_async并不知道self会在什么时候被释放，为了确保系统调度执行Block中的任务时self没有被意外释放掉，dispatch_async必须自己retain一次self，任务完成后再release self。但这里使用<code>__block</code>，使dispatch_async没有增加self的引用计数，这使得在系统在调度执行Block之前，self可能已被销毁，但系统并不知道这个情况，导致Block被调度执行时self已经被释放导致crash。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">// MyClass.m</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="nf">test</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">__block</span> <span class="n">MyClass</span><span class="o">*</span> <span class="n">weakSelf</span> <span class="o">=</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">double</span> <span class="n">delayInSeconds</span> <span class="o">=</span> <span class="mf">10.0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">dispatch_time_t</span> <span class="n">popTime</span> <span class="o">=</span> <span class="n">dispatch_time</span><span class="p">(</span><span class="n">DISPATCH_TIME_NOW</span><span class="p">,</span> <span class="p">(</span><span class="n">int64_t</span><span class="p">)(</span><span class="n">delayInSeconds</span> <span class="o">*</span> <span class="n">NSEC_PER_SEC</span><span class="p">));</span>
</span><span class='line'>  <span class="n">dispatch_after</span><span class="p">(</span><span class="n">popTime</span><span class="p">,</span> <span class="n">dispatch_get_main_queue</span><span class="p">(),</span> <span class="o">^</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>    <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">weakSelf</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// other.m</span>
</span><span class='line'><span class="n">MyClass</span><span class="o">*</span> <span class="n">obj</span> <span class="o">=</span> <span class="p">[[[</span><span class="n">MyClass</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">]</span> <span class="n">autorelease</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">obj</span> <span class="n">test</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里用dispatch_after模拟了一个异步任务，10秒后执行Block。但执行Block的时候<code>MyClass* obj</code>已经被释放了，导致crash。解决办法是不要使用<code>__block</code>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步实现iOS应用PUSH功能]]></title>
    <link href="http://tanqisen.github.com/blog/2013/02/27/ios-push-apns/"/>
    <updated>2013-02-27T16:25:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2013/02/27/ios-push-apns</id>
    <content type="html"><![CDATA[<h3>1.  push原理</h3>

<p><strong>iOS push 工作机制可以用下图简要概括</strong></p>

<p><img src="http://tanqisen.github.com/images/ios_push.jpg"></p>

<ul>
<li><code>Provider</code>:应用自己的服务器；</li>
<li><code>APNS</code>:Apple Push Notification Service的简称，苹果的PUSH服务器；</li>
</ul>


<p><strong>push的主要工作流程是：</strong></p>

<ul>
<li>iOS设备连接网络后，会自动与APNS保持类似TCP的长链接，等待APNS推送消息的到来；</li>
<li>应用启动时注册消息推送，并获取设备的在APNS中注册的唯一设备标示deviceToken上传给应用服务器(即Provider)；</li>
<li>在需要给应用推送消息时，Provider把push内容、接收push消息的deviceToken按APNS指定的格式打包好，发送给APNS；</li>
<li>APNS收到Provider发送的消息后，查找deviceToken指定的设备，如果该设备已经和APNS建立了连接，则立即将消息推送给该设备，如果设备不在线，则在该设备下次连接到APNS后将消息推送到设备。请注意苹果并不保证推送一定成功；</li>
<li>设备收到push消息后，iOS系统会根据SSL证书判断这个push消息是发给那个应用的，进而启动相应客户端。</li>
</ul>


<!--more-->


<blockquote><p>上述过程中，有两个关键步骤需要自己处理的是：1.客户端获取deviceToken，并上传到Provider；2.Provider发送push消息到APNS。这两个步骤中都需要苹果的push证书授权，下面就来介绍如何生成push证书，以及Provisioning Profile。</p></blockquote>

<h3>2.  push证书及Provisioning Profile生成</h3>

<ul>
<li><p><strong>用付费帐号登录到<a href="http://developer.apple.com/iphone/index.action">http://developer.apple.com/iphone/index.action</a></strong></p></li>
<li><p><strong>生成push证书前要先生成开发证书</strong></p>

<p>生成开发证书的过程不详细介绍，可以参考<a href="http://www.cocoachina.com/bbs/read.php?tid=7923&amp;keyword=%B7%A2%B2%BC">如何联机调试和发布程序</a>。只是有一点需要注意的，生成开发证书过程中需要通过Keychain生成一个CSR文件，默认名为CertificateSigningRequest.certSigningRequest，这个文件将在生成push证书的时候用到。</p></li>
<li><p><strong>创建一个App ID</strong></p>

<ul>
<li>创建过程中Description可以任意填写，比如叫<code>push_demo</code>；</li>
<li>Bundle Identifier一般用<code>com.company.appname</code>这样的格式，例如<code>com.mycompany.demo</code>；</li>
</ul>


<blockquote><p>注意：要用push功能的Bundle Identifier一定不能出现通配符，比如<code>com.mycompany.*</code>，这样的名字是不能使用push的。</p></blockquote></li>
<li><p><strong>生成Push SSL Certificate</strong></p>

<p>  生成好App ID后点击<code>Configure</code>进入配置页。打开<code>Enable for Apple Push Notification service</code>选项，该选项下有<code>Development Push SSL Certificate</code>和<code>Production Push SSL Certificate</code>两个SSL Certificate可以配置，前面一个是用来的开发的push证书，后面一个是用来发布的。我们以开发push证书为例，点击<code>Development Push SSL Certificate</code>-><code>Configure</code>，后面会要求选择CSR文件，这就是生成开发证书时的CertificateSigningRequest.certSigningRequest文件，选择好CSR后就生成好相应的SSL Certificate了。下载下来，保存名为<code>aps_developer.cer</code>。</p></li>
<li><p><strong>从Keychain中导出私钥、设置好密码，命名为private_key.p12</strong></p></li>
<li><p><strong>生成push证书</strong></p>

<ul>
<li><p>这时我们一共得到3个文件:</p>

<ol>
<li>CertificateSigningRequest.certSigningRequest</li>
<li>private_key.p12</li>
<li>aps_developer.cer</li>
</ol>
</li>
<li><p>将aps_developer.cer转成pem格式</p>

<pre><code>openssl x509 -in aps_developer.cer -inform DER -out aps_developer.pem -outform PEM 
</code></pre></li>
<li><p>将private_key.p12格式的私钥转换成private_key.pem</p>

<pre><code>openssl pkcs12 -nocerts -out private_key.pem -in private_key.p12
</code></pre>

<blockquote><p>这一步会要求输入p12私钥的密码，以及设置新生成的pem的密码。</p></blockquote></li>
<li><p>创建用于服务端的SSL p12格式证书，命名为aps_developer.p12</p>

<pre><code>openssl pkcs12 -export -in aps_developer.pem -inkey private_key.pem -certfile CertificateSigningRequest.certSigningRequest -name "aps_developer" -out aps_developer.p12
</code></pre>

<blockquote><p>这一步会要求输入private_key.pem的密码，注意不是private_key.p12的密码。如果密码错误，或者CertificateSigningRequest.certSigningRequest文件不匹配都不能正常生成aps_developer.p12文件，如果生成的aps_developer.p12文件大小是0，说明生成过程中出了问题，请检查pem私钥、密码、以及CertificateSigningRequest.certSigningRequest是否正确。</p></blockquote>

<p>aps_developer.p12就是Provider向APNS发送push消息需要的SSL证书。把这个证书和密码提供给服务端，服务端就可以发送push消息给APNS了。这时服务端已经可以工作了，但客户端还必须配置相应的Provisioning Profile才能启动应用的push功能。</p>

<blockquote><p>服务器配置需注意的是，由于我们生成的是开发环境的push证书，所以服务器应该连接APNS的sandbox环境地址：<code>gateway.sandbox.push.apple.com:2195</code>，如果应用正式发布，就要连接正式环境，必须生成相应的发布证书，并连接APNS正式环境地址：<code>gateway.push.apple.com:2195</code>。</p></blockquote></li>
</ul>
</li>
<li><p><strong>生成Provisioning Profile</strong></p>

<ul>
<li>新建Profile，命名为push_dev；</li>
<li>选择相应证书；</li>
<li>App ID选择push_demo;</li>
<li>选择设备；</li>
<li>下载并安装该Profile供开发使用；</li>
</ul>
</li>
</ul>


<h3>3.  Xcode证书设置、Info.plist设置</h3>

<ul>
<li>用Xcode打开客户端工程，设置Info.plist的Bundle identifier为<code>com.mycompany.demo</code>。</li>
<li>打开工程设置，必须将证书设置为与push_dev关联的证书。</li>
</ul>


<h3>4.  客户端获取deviceToken</h3>

<p>  服务端要发送push消息给某一设备还必须知道该设备的deviceToken。应用运行后获取到deviceToken，然后上传给服务器，下面介绍应用如何获取deviceToken。应用必须先注册使用push功能。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOptions</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">registerForRemoteNotificationTypes:</span><span class="p">(</span><span class="n">UIRemoteNotificationTypeAlert</span> <span class="o">|</span> <span class="n">UIRemoteNotificationTypeSound</span> <span class="o">|</span> <span class="n">UIRemoteNotificationTypeBadge</span><span class="p">)];</span>
</span><span class='line'>      <span class="c1">// do something</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  在AppDelegate中添加下面方法来获取deviceToken：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">app</span> <span class="nl">didRegisterForRemoteNotificationsWithDeviceToken:</span><span class="p">(</span><span class="n">NSData</span> <span class="o">*</span><span class="p">)</span><span class="n">deviceToken</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSString</span> <span class="o">*</span><span class="n">token</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">deviceToken</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">token</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">app</span> <span class="nl">didFailToRegisterForRemoteNotificationsWithError:</span><span class="p">(</span><span class="n">NSError</span> <span class="o">*</span><span class="p">)</span><span class="n">error</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;%@&quot;</span><span class="p">,</span> <span class="n">error</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  应用获取到deviceToken后，上传给Provider，Provider就可以用这个deviceToken给这个设备push消息了。</p>

<h3>5.  Payload格式及自定义数据</h3>

<p>  服务器配置好证书并拿到deviceToken后就可以向APNS发送消息了。发送消息的格式如下图所示：</p>

<p>  <img src="http://tanqisen.github.com/images/ios_push_payload.jpg"></p>

<p>  Payload就是push的消息负载，这就是应用需要关心的数据。
  Payload是一个JSON字典，最大值是 256 字节，超过这个限制，APNS将拒绝转发。基本格式如下：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;aps&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;alert&quot;</span><span class="p">:</span><span class="s2">&quot;Hello Push!&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;badge&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;sound&quot;</span><span class="p">:</span><span class="s2">&quot;default&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  必须包含<code>aps</code>键值。<code>badge</code>表示应用程序图标显示的数字，<code>sound</code>表示收到push的提示音。
  Payload的具体结构参考<a href="http://developer.apple.com/library/mac/#documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/ApplePushService/ApplePushService.html">Apple Push Notification Service</a></p>

<p>  要在这个结构中新增自定义数据，请加在aps空间之外。比如后台推送消息给应用同时要求应用打开某个页面：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;aps&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;alert&quot;</span><span class="p">:</span><span class="s2">&quot;Hello Push!&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;badge&quot;</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;sound&quot;</span><span class="p">:</span><span class="s2">&quot;default&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nt">&quot;page&quot;</span><span class="p">:</span><span class="s2">&quot;home&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  后台告诉客户端收到这个push后打开应用的主页，这里的page、home都是自己定义的。必须注意的是，Payload大小不能超过限制，所以可以把自定义数据更简化点，比如可以把home与编号1对应，page简写为p，这样<code>"p":1</code>表示打开主页，可以缩小Payload的大小。</p>

<h3>6.  客户端接收push消息</h3>

<p>  iOS系统收到push消息后，如果用户点击查看，系统将根据证书启动相应应用。如果应用已经启动，将调用AppDelegate的方法：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didReceiveRemoteNotification:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">userInfo</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// userInfo 就是push消息的Payload</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  如果应用还没有启动，通过push冷启动后，仍然能在启动后获取Payload：</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="o">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nl">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="n">application</span> <span class="nl">didFinishLaunchingWithOptions:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">launchOptions</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">NSDictionary</span><span class="o">*</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="p">[</span><span class="n">launchOptions</span> <span class="nl">objectForKey:</span><span class="n">UIApplicationLaunchOptionsRemoteNotificationKey</span><span class="p">];</span>
</span><span class='line'>      <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;Payload: %@&quot;</span><span class="p">,</span> <span class="n">userInfo</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  目前为止，push功能基本就完成了，可以开始push功能测试了，如果服务器还没开发完成，或者想快速测试是否能正常push，可以使用下面的代码实现后台push测试。发送push前要配置好SSL证书，以及deviceToken和Payload结构。</p>

<p>  <a href="https://github.com/stefanhafeneger/PushMeBaby">object c 版本</a><br/>
  <a href="https://github.com/kumaranvram/PushNotificationApp">c 版本</a><br/>
  <a href="https://github.com/qiaohe/pushNotificationService">java 版本</a><br/>
  <a href="https://github.com/dsaki/PushNotification">php 版本</a><br/></p>

<p>  还有个小问题，当Payload设置了badge，应用图标上将一直显示一个数字提示，如果要清除数字提示，或者设置成其他数字，调用下面函数就可以完成。</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'>  <span class="p">[[</span><span class="n">UIApplication</span> <span class="n">sharedApplication</span><span class="p">]</span> <span class="nl">setApplicationIconBadgeNumber:</span><span class="n">number</span><span class="p">];</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>  number为0就会清除数字提示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim查找替换及正则表达式的使用]]></title>
    <link href="http://tanqisen.github.com/blog/2013/01/13/vim-search-replace-regex/"/>
    <updated>2013-01-13T22:18:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2013/01/13/vim-search-replace-regex</id>
    <content type="html"><![CDATA[<h3>简单替换表达式</h3>

<p>  <code>
  :[range]s/from/to/[flags]
 </code></p>

<ul>
<li><p><code>range</code>:搜索范围，如果没有指定范围，则作用于但前行。</p>

<ol>
<li><code>:1,10s/from/to/</code> 表示在第1到第10行（包含第1，第10行）之间搜索替换；</li>
<li><code>:10s/from/to/</code> 表示只在第10行搜索替换；</li>
<li><code>:%s/from/to/</code> 表示在所有行中搜索替换；</li>
<li><code>1,$s/from/to/</code> 同上。</li>
</ol>
</li>
<li><p><code>flags</code> 有如下四个选项：</p>

<ol>
<li><code>c</code> confirm，每次替换前询问；</li>
<li><code>e</code> error， 不显示错误；</li>
<li><code>g</code> globle，不询问，整行替换。如果不加<code>g</code>选项，则只替换每行的第一个匹配到的字符串；</li>
<li><code>i</code> ignore，忽略大小写。</li>
</ol>


<p>这些选项可以合并使用，如<code>cgi</code>表示不区分大小写，整行替换，替换前询问。</p></li>
</ul>


<h3>正则表达式</h3>

<ol>
<li><p>元字符</p>

<ul>
<li><p>元字符</p>

<table>
<thead>
<tr>
<th align="center"> 元字符 </th>
<th align="left"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> .      </td>
<td align="left"> 匹配任意字符</td>
</tr>
<tr>
<td align="center"> [abc]  </td>
<td align="left"> 匹配方括号中的任意一个字符，可用<code>-</code>表示字符范围。如[a-z0-9]匹配小写字母和数字</td>
</tr>
<tr>
<td align="center"> [&#94;abc] </td>
<td align="left"> 匹配除方括号中字符之外的任意字符</td>
</tr>
<tr>
<td align="center"> \d     </td>
<td align="left"> 匹配阿拉伯数字，等同于[0-9]</td>
</tr>
<tr>
<td align="center"> \D     </td>
<td align="left"> 匹配阿拉伯数字之外的任意字符，等同于[&#94;0-9]</td>
</tr>
<tr>
<td align="center"> \x     </td>
<td align="left"> 匹配十六进制数字，等同于[0-9A-Fa-f]</td>
</tr>
<tr>
<td align="center"> \X     </td>
<td align="left"> 匹配十六进制数字之外的任意字符，等同于[&#94;0-9A-Fa-f]</td>
</tr>
<tr>
<td align="center"> \l     </td>
<td align="left"> 匹配[a-z]</td>
</tr>
<tr>
<td align="center"> \L     </td>
<td align="left"> 匹配[&#94;a-z]</td>
</tr>
<tr>
<td align="center"> \u     </td>
<td align="left"> 匹配[A-Z]</td>
</tr>
<tr>
<td align="center"> \U     </td>
<td align="left"> 匹配[&#94;A-Z]</td>
</tr>
<tr>
<td align="center"> \w     </td>
<td align="left"> 匹配单词字母，等同于[0-9A-Za-z_]</td>
</tr>
<tr>
<td align="center"> \W     </td>
<td align="left"> 匹配单词字母之外的任意字符，等同于[&#94;0-9A-Za-z_]</td>
</tr>
<tr>
<td align="center"> \t     </td>
<td align="left"> 匹配<code>&lt;TAB&gt;</code>字符</td>
</tr>
<tr>
<td align="center"> \s     </td>
<td align="left"> 匹配空白字符，等同于[\t]</td>
</tr>
<tr>
<td align="center"> \S     </td>
<td align="left"> 匹配非空白字符，等同于[&#94;\t]</td>
</tr>
</tbody>
</table>


<p> <br/></p></li>
<li><p>一些普通字符需转意</p>

<table>
<thead>
<tr>
<th align="center"> 元字符 </th>
<th align="left"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"> \*   </td>
<td align="left"> 匹配<code>*</code> 字符</td>
</tr>
<tr>
<td align="center"> &#46;   </td>
<td align="left"> 匹配<code>.</code> 字符</td>
</tr>
<tr>
<td align="center"> \/   </td>
<td align="left"> 匹配 <code>/</code> 字符</td>
</tr>
<tr>
<td align="center"> &#92;   </td>
<td align="left"> 匹配 <code>\</code> 字符</td>
</tr>
<tr>
<td align="center"> \[   </td>
<td align="left"> 匹配 <code>[</code> 字符</td>
</tr>
<tr>
<td align="center"> \]   </td>
<td align="left"> 匹配 <code>]</code> 字符</td>
</tr>
</tbody>
</table>


<p> <br/></p></li>
<li><p>表示数量的元字符</p>

<table>
<thead>
<tr>
<th align="center">元字符 </th>
<th align="left"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">*     </td>
<td align="left"> 匹配0-任意个</td>
</tr>
<tr>
<td align="center">\+    </td>
<td align="left"> 匹配1-任意个</td>
</tr>
<tr>
<td align="center">\?    </td>
<td align="left"> 匹配0-1个</td>
</tr>
<tr>
<td align="center">\{n,m}</td>
<td align="left"> 匹配n-m个</td>
</tr>
<tr>
<td align="center">\{n}  </td>
<td align="left"> 匹配n个</td>
</tr>
<tr>
<td align="center">\{n,} </td>
<td align="left"> 匹配n-任意个</td>
</tr>
<tr>
<td align="center">\{,m} </td>
<td align="left"> 匹配0-m个</td>
</tr>
</tbody>
</table>


<p><br/></p></li>
<li><p>表示位置的元字符</p>

<table>
<thead>
<tr>
<th align="center">元字符 </th>
<th align="left"> 说明</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">$      </td>
<td align="left"> 匹配行尾</td>
</tr>
<tr>
<td align="center">&#94;  </td>
<td align="left"> 匹配行首</td>
</tr>
<tr>
<td align="center">\&lt;    </td>
<td align="left"> 匹配单词词首</td>
</tr>
<tr>
<td align="center">\>    </td>
<td align="left"> 匹配单词词尾</td>
</tr>
</tbody>
</table>


<p><br/></p></li>
</ul>
</li>
<li><p>替换变量</p>

<p>在正则式中以<code>\(</code>和<code>\)</code>括起来的正则表达式，在后面使用的时候可以用<code>\1</code>、<code>\2</code>等变量来访问<code>\(</code>和<code>\)</code>中的内容。</p></li>
</ol>


<h3>例子</h3>

<ol>
<li>删除行尾空格：<code>:%s/\s+$//g</code></li>
<li>删除行首多余空格：<code>%s/^\s*//</code> 或者 <code>%s/^ *//</code></li>
<li>删除沒有內容的空行：<code>%s/^$//</code> 或者 <code>g/^$/d</code></li>
<li>删除包含有空格组成的空行：<code>%s/^\s*$//</code> 或者 <code>g/^\s*$/d</code></li>
<li>删除以空格或TAB开头到结尾的空行：<code>%s/^[ |\t]*$//</code> 或者 <code>g/^[ |\t]*$/d</code></li>
<li><p>把文中的所有字符串“abc……xyz”替换为“xyz……abc”可以有下列写法</p>

<pre><code>:%s/abc\(.*\)xyz/xyz\1abc/g
:%s/\(abc\)\(.*\)\(xyz\)/\3\2\1/g
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitHub+Octopress搭建免费blog]]></title>
    <link href="http://tanqisen.github.com/blog/2012/12/27/github-plus-octopressda-jian-mian-fei-blog/"/>
    <updated>2012-12-27T11:45:00+08:00</updated>
    <id>http://tanqisen.github.com/blog/2012/12/27/github-plus-octopressda-jian-mian-fei-blog</id>
    <content type="html"><![CDATA[<h2>生成github公钥</h2>

<ol>
<li><p>检查ssh公钥设置：</p>

<p>如果id_rsa*文件不存在，跳到第三步；</p>

<pre><code>$ cd .ssh
$ ls
</code></pre></li>
<li><p>备份原来的ssh key：</p>

<p>备份旧数据，备份后删除旧数据；</p>

<pre><code>$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*
</code></pre></li>
<li><p>生成github ssh key：</p>

<pre><code>$ ssh-keygen -t rsa -C "id@youremail.com" &lt;github 帐号&gt;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车就好&gt;
</code></pre>

<p>然后系统会要你输入加密串</p>

<pre><code>Enter passphrase (empty for no passphrase):&lt;github密码&gt;
Enter same passphrase again:&lt;再次输入密码&gt;
</code></pre>

<p>最后看到下面信息就成功了</p>

<pre><code>Your identification has been saved in /Users/xxx/.ssh/id_rsa.
Your public key has been saved in /Users/xxx/.ssh/id_rsa.pub.
The key fingerprint is:
ac:63:ff:c9:67:8f:c7:b7:26:43:77:83:bd:ef:11:be username@gmail.com
The key's randomart image is:
+--[ RSA 2048]----+
|                 |
|                 |
|                 |
|       .         |
|        S       .|
|       .       ..|
|      +      .o..|
|     . o . .o*o==|
|        ..+ooo*EO|
+-----------------+ 
</code></pre></li>
<li><p>添加ssh key到github：</p>

<p>复制id_rsa.pub的内容到github <code>Account Settings</code> -> <code>SSH Keys</code> -> <code>add SSH Key</code> -> <code>Key</code></p></li>
</ol>


<h2>在github上使用octopress</h2>

<ol>
<li><p>在你本地安装octopress</p>

<pre><code>$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
$ ruby --version  # Should report Ruby 1.9.2

$ gem install bundler # Install dependencies
$ bundle install

$ rake install # Install the default Octopress theme
</code></pre></li>
<li><p>配置你本地的octopress</p>

<ul>
<li><p>创建github repo，名称<code>username.github.com</code></p></li>
<li><p>配置octopress使之与<code>username.github.com</code>关联</p>

<pre><code>$ cd octopress
$ rake setup_github_pages
  Enter the read/write url for your repository
  (For example, 'git@github.com:your_username/your_username.github.com')
  Repository url: &lt;git@github.com:yourname/yourname.github.com&gt;
</code></pre></li>
</ul>


<p>以上执行后会要求 read/write url for repository ： </br>
git@github.com:yourname/yourname.github.com.git</p></li>
<li><p>初始化github</p>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>等待几分钟后，github上会收到一封信：“[yourname.github.com] Page build successful”，第一次发布后等比较久，之后每次都会直接更新</p></li>
<li><p>将 source 也加入 git</p>

<pre><code>$ cd octopress
$ git add .
$ git commit -m 'your message'
$ git push origin source
</code></pre></li>
<li><p>更新 Octopress</p>

<p>日后有 Octopress 新版本发布，使用以下指令升级。</p>

<pre><code>$ git pull octopress master     # Get the latest Octopress
$ bundle install                # Keep gems updated
$ rake update_source            # update the template's source
$ rake update_style             # update the template's style
</code></pre></li>
<li><p>编写并发布文章</p>

<ul>
<li><p>发表新文章：</p>

<pre><code>$ rake new_post["文章名称"]
</code></pre>

<p>该命令会在你的”octopress/source/_posts”目录下生成对应的”.markdown”文件，用任意文本编辑器编辑，使用markdown语法编写你的文章。</p></li>
<li><p>生成：</p>

<pre><code>$ rake generate # generate your blog static pages content according to your input. 
</code></pre></li>
<li><p>预览：</p>

<pre><code>$ rake preview # start a web server on "http://localhost:4000", you can preview your blog content.
</code></pre></li>
<li><p>发布：</p>

<pre><code>$ rake deploy # push your static pages content to your github pages repo ("master" branch)
</code></pre></li>
<li><p>生成并发布：</p>

<pre><code>$ rake gen_deploy
</code></pre></li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
